%!PS-Adobe-3.1 EPSF-3.0%%Title: j.15.eps%%Creator: Adobe Illustrator(R) X%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: manoj%%CreationDate: 7/1/04%%BoundingBox: 0 0 332 299%%HiResBoundingBox: 0 0 331.8311 298.2627%%CropBox: 0 0 331.8311 298.2627%%LanguageLevel: 2%%DocumentData: Clean7Bit%ADOBeginClientInjection: DocumentHeader "AI10"%ADOEndClientInjection: DocumentHeader "AI10"%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_AGM_Gradient_Sep (1.0 0)%%+ procset Adobe_AGM_Gradient (1.1 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)%%+ procset Adobe_CoolType_Core (2.12 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %AI7_Thumbnail: 128 116 8%%BeginData: 8650 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD15FF7DFD46FF7DA8FD34FF52A852277D7D52A8527D527D527D52%FD05FF2752527D527D527D27A8FD29FF527DFD06527D275252A8527DFD04%FF527D7D277D527D527D52FD1CFF7DFF52527D277D7D527DFF527D7D52FD%05FFFD04527D7D527D52A8FD29FF527D277D27527D5227FD047D52A8FD04%FF7D527D527D277D27A852FD30FF52FFFFFF52A8FD40FF52FFFFFF7D52FD%25FF7DFFA8A8FD15FFA8527D52527DFD28FF7DA8A8FD16FF7D7D527D52FD%1BFF52527D5252A8FD11FFA85252FD04FF7D27A8FD26FF277D527D52FD12%FFA827A8FD04FF5252FD19FF277D7D7D52A8FD11FF52A8FD07FF27FD26FF%52527D7D52FD12FF52FD07FFA852FD2EFFA87DFD09FF27FD3BFF27FD09FF%52A8FD2DFF27FD0AFF7DA8FD39FF5252FD0AFF52FD2CFFA8F8A8FD09FFA8%7DFD39FF5227FD0AFF52FD29FF7DA87D7D52A87D7DA8FD07FF52FD35FFA8%7D7DA8527D7DA87DFD07FF52FD17FF7D7D847D847DFD0CFF7DFD08A8FD07%FF7DFD23FFA87D847D847DA8FD0BFFFD08A87DFD07FF7DFD17FF7EAF52A8%AFA8FD0CFF7DFD07A87DFD07FF52FD23FF7DAF7D7D7DAFA8FD0BFF7DFD07%A87DFD07FF52FD17FF84A95952AF7DFD0CFF7DFD08A8FD07FF7DFD23FF84%A87DA959A8A8FD0BFFFD08A87DFD07FF7DFD17FF7DAF5284A9A8FD0CFF7D%FD07A87DFD07FF52FD23FF84AF7D7D7DAF7DFD0BFF7DFD07A87DFD07FF52%FD17FF7EA8AFA8AF7DFD0CFF7DFD08A8FD07FF7DFD23FFA8A8AFA8AFA8A8%FD0BFFFD08A87DFD07FF7DFD17FF53847E847DA8FD0CFF7DFD07A87DFD07%FF52FD23FF7D847D847E8484FD0BFF7DFD07A87DFD07FF52FD29FF7DFD08%A8FD07FF7DFD35FFFD08A87DFD07FF7DFD29FFA8A87D7D52A87DA8A8FD07%FF52FD36FFA87DA8527D7DA8A8FD07FF52FD2CFF7D7DFD0BFF7DFD39FF7D%7DFD0AFF7DFD2CFF7D52A8FD0AFF52FD38FFA87D7DA8FD09FF52FD2CFF52%527DFD0AFF7DFD38FFA85252FD0AFF7DFD2CFFA852FD0BFF52FD39FF527D%FD0AFF52FD29FFFD087DA8FD07FF7DFD35FFA8FD087DFD07FF7DFD17FF53%847E847DA8FD0CFF7DFD07A87DFD07FF52FD23FF7D847D847E8484FD0BFF%7DFD07A87DFD07FF52FD17FF84A8537DAF7DFD0CFF7DFD08A8FD07FF7DFD%23FFA8A9845284A9A8FD0BFFFD08A87DFD07FF7DFD17FF7DAF527DAFA8FD%0CFF7DFD07A87DFD07FF52FD23FF7DAF53AF52AFA8FD0BFF7DFD07A87DFD%07FF52FD17FF84A8527DAF7DFD0CFF7DFD08A8FD07FF7DFD23FF84A88452%7EA8A8FD0BFFFD08A87DFD07FF7DFD17FF7EAFA9AFAFA8FD0CFF7DFD07A8%7DFD07FF52FD23FF7DAFAFAFA9AFA8FD0BFF7DFD07A87DFD07FF52FD17FF%7D7D847D847DFD0CFF7DFD08A8FD07FF7DFD23FFA87D847D847DA8FD0BFF%FD08A87DFD07FF7DFD29FFFD097DFD07FF52FD35FFFD087D52FD07FF52FD%2CFF7D7DFD0BFF7DFD39FF7D7DFD0AFF7DFD2CFFA87DFD0BFF52FD39FF7D%A8FD0AFF52FD2CFF527D52FD0AFF7DFD38FF7D7D52A8FD09FF7DFD2CFF7D%52A8FD0AFF52FD39FF527DFD0AFF52FD29FFA87DA87D527DA87DFD08FF7D%FD36FF7DA87D5252A87DA8FD07FF7DFD07FFA8FD0FFFA8A884A8A8FD0DFF%7DFD07A87DFD07FF52FD23FFFD04A884A8FD0CFF7DFD07A87DFD07FF52FF%7D52A85252527DFD0BFFA8FFFFFF84A9AFA8AF7DFD0CFF7DFD08A8FD07FF%7DFD23FF84A8AFA9AFA8A8FD0BFFFD08A87DFD07FF7DFF7D7D7D52527D52%FD04FFA87DA87DA87DA8277DA8FF7DAF53AFA9A8FD0CFF7DFD07A87DFD07%FF52FD23FF84AF7D7D7DAF7DFD0BFF7DFD07A87DFD07FF52FD0CFF7DA8A8%A87D7DFD05527EA852A8AF7DFD0CFF7DFD08A8FD07FF7DFD23FFA8A859A8%7DA8A8FD0BFFFD08A87DFD07FF7DFD04FFA8A8FD06FFA8FD067D5252277D%7DAF59AFA9A8FD0CFF7DFD07A87DFD07FF52FD23FF84AF7D7D7DAF84FD0B%FF7DFD07A87DFD07FF52527D527D277D275252FD0AFF527DFFFF84A8AFA9%AF7DFD0CFF7DFD08A8FD07FF7DFD23FFA8A9AFA8AFA9A8FD0BFFFD08A87D%FD07FFFD067D527D7D7DFD0EFF7DA87DA884A8FD0CFF7DFD07A87DFD07FF%52FD23FFA8A884A87DA8A8FD0BFF7DFD07A87DFD07FF52FD29FF7D7DA852%7D7DA87DA8FD07FF7DFD35FFA8FD047D527D7DA8FD07FF7DFD2CFFA87DFD%0BFF52FD39FF7DA8FD0AFF52FD2CFF7D7DFD0BFF7DFD39FF7D7DFD0AFF7D%FD2BFFA8527D7DFD0AFF52FD38FF7D5252A8FD09FF52FD2CFF5252A8FD0A%FF7DFD39FF5252FD0AFF7DFD29FF7DA87DA852A87DA8A8FD07FF52FD35FF%A8A87DA87D7D7DA87DFD07FF52FD17FF7D7DA87D84A8FD0CFF7DFD08A8FD%07FF7DFD23FFA87D847DA87DA8FD0BFFFD08A87DFD07FF7DFD17FF7DAFA9%AFAFA8FD0CFF7DFD07A87DFD07FF52FD23FF7DAFAFAFA9AFA8FD0BFF7DFD%07A87DFD07FF52FD17FF84A859A8AF7DFD0CFF7DFD08A8FD07FF7DFD23FF%84A884527EA8A8FD0BFFFD08A87DFD07FF7DFD17FF7EAF52AFAFA8FD0CFF%7DFD07A87DFD07FF52FD23FF7DAF59AF52AFA8FD0BFF7DFD07A87DFD07FF%52FD17FF84A959A8AF7DFD0CFF7DFD08A8FD07FF7DFD23FF84A8845284A8%A8FD0BFFFD08A87DFD07FF7DFD17FF7DAFAFAFA9A8FD0CFF7DFD07A87DFD%07FF52FD23FF84AFA9AFAFAF7DFD0BFF7DFD07A87DFD07FF52FD17FFA87D%A87DA8A8FD0CFF7DFD08A8FD07FF7DFD23FFAF7DA87DA87DFD0CFFFD08A8%7DFD07FF7DFD29FFA8A87D7D52A87DA8FD08FF52FD35FFA8A87DA8527D7D%A8A8FD07FF52FD2CFF7D7DFD0BFF7DFD39FF7D7DFD0AFF7DFD2CFF7D52A8%FD0AFF52FD39FF527DA8FD09FF52FD2CFF527D52FD0AFF7DFD38FF7D7D52%FD0AFF7DFD2CFFA827FD0BFF52FD39FF527DFD0AFF52FD29FFFD087DA8FD%07FF7DFD35FFA8FD087DFD07FF7DFD17FF59A87E847DA8FD0CFF7DFD07A8%7DFD07FF52FD23FF84847DA87E84A8FD0BFF7DFD07A87DFD07FF52FD17FF%7EA8527DAF7DFD0CFF7DFD08A8FD07FF7DFD1FFF7D527DFFA8A87E5284A8%A8FD0BFFFD08A87DFD07FF7DFD17FF7DAF597DA9A8FD0CFF7DFD07A87DFD%07FF52FD18FFA87DA87D7D527D527D527D7DAF52AF59AF84FD0BFF7DFD07%A87DFD07FF52FD17FF84A8537DAF7DFD0CFF7DFD08A8FD07FF7DFD18FFFD%047DFD06522752A9845284A9A8FD0BFFFD08A87DFD07FF7DFD17FF7DAFA9%AFAFA8FD0CFF7DFD07A87DFD07FF52FD1FFF7D527DFF7DAFAFAFA9AFA8FD%0BFF7DFD07A87DFD07FF52FD17FF597D7E7D847DFD0CFF7DFD08A8FD07FF%7DFD20FFA8FFFF7D7D847D7E7DA8FD0BFFFD08A87DFD07FF7DFD29FFFD09%7DFD07FF52FD35FFFD097DFD07FF52FD39FF7DFD45FF7DFD19FF7DFD12FF%7DFD0CFF52FD25FF52FD13FF52FD0BFF52FD39FF7DFD45FF7DFD19FF7DFD%12FF7DFD0CFF52FD25FF7DFD13FF7DFD0BFF52FD39FF7DFD45FF7DFD19FF%52FD12FF7DFD0CFF52FD25FF7DFD13FF7DFD0BFF52FD39FF7DFD45FF7DFD%29FF7DA87DA87DA87DA8A8FD07FF52FD35FFA8A87DA87DA87DA87DFD07FF%52FD17FF7D7D847D847DFD0CFF7DFD08A8FD07FF7DFD23FFA87D847D847D%A8FD0BFFFD08A87DFD07FF7DFD17FF7DAF53AFA9A8FD0CFF7DFD07A87DFD%07FF52FD23FF84AFA97DAFAF7DFD0BFF7DFD07A87DFD07FF52FD17FF7EA8%52A8AF7DFD0CFF7DFD08A8FD07FF7DFD23FFA8A8AF27AFA8A8FD0BFFFD08%A87DFD07FF7DFD17FF7DAF59AFA9A8FD0CFF7DFD07A87DFD07FF52FD23FF%84AFA97DAFAF84FD0BFF7DFD07A87DFD07FF52FD17FF84A8AFA9AF7DFD0C%FF7DFD08A8FD07FF7DFD23FFA8A9AFA8AFA9A8FD0BFFFD08A87DFD07FF7D%FD17FF59847D847D84FD0CFF7DFD07A87DFD07FF52FD23FF7D847D847D84%A8FD0BFF7DFD07A87DFD07FF52FD29FFFD087DA8FD07FF7DFD35FFA8FD08%7DFD07FF7DFD2CFFA87DFD0BFF52FD39FF7DA8FD0AFF52FD2CFF7D7DFD0B%FF7DFD39FF7D7DFD0AFF7DFD2BFFA87D7D7DFD0AFF52FD38FFA8527DA8FD%09FF52FD2CFF52527DFD0AFF7DFD38FFA85252FD0AFF7DFD2CFFA852FD0B%FF52FD39FF527DFD0AFF52FD29FFFD087DA8FD07FF7DFD35FFA8FD087DFD%07FF7DFD17FF59847D847D84FD0CFF7DFD07A87DFD07FF52FD23FF7D847D%847D84A8FD0BFF7DFD07A87DFD07FF52FD17FF84A859A8AF7DFD0CFF7DFD%08A8FD07FF7DFD23FF84A8AF52AFA8A8FD0BFFFD08A87DFD07FF7DFD17FF%7EAF52AFAFA8FD0CFF7DFD07A87DFD07FF52FD23FF7DAFAF52A9AFA8FD0B%FF7DFD07A87DFD07FF52FD17FF84A959A8AF7DFD0CFF7DFD08A8FD07FF7D%FD23FF84A8AF52AFA8A8FD0BFFFD08A87DFD07FF7DFD17FF7DAFAFAFA9A8%FD0CFF7DFD07A87DFD07FF52FD23FF84AFA9AFAFAF7DFD0BFF7DFD07A87D%FD07FF52FD17FF7D7D847D847DFD0CFF7DFD08A8FD07FF7DFD23FFA87D84%7D847DA8FD0BFFFD08A87DFD07FF7DFD29FF7DA87DA852A87DA8A8FD07FF%52FD35FFA8A87DA852A87DA87DFD07FF52FD2DFF52FD0AFFA87DFD39FF7D%A8FD0AFF7DFD2DFF52FD0AFFA87DFD39FFA87DFD0AFF52FD2DFF7D7DFD09%FF27FD3BFF27FD09FFA87DFD2EFF52FD08FF7D7DFD3BFFA852FD08FF52FD%2FFFA852A8FD05FF5252FD3DFF7D52FD05FFA852A8FD30FFA87D527D7D7D%52A8FD3FFFA8527D7D7D527DFD35FFA8A8FD45FFA8A8FD97FFA8FD05FF52%FD10FF7DA8FD33FF52FD11FF52FD20FF527D7DA8527D7D7D527D52FF527D%7D7D527D7D7D52A8A87D27FF7D7DA8527D52527D52FD23FFA87D525252A8%527DA85252A8A87D52FF7D7D527DA87DFF7D527DFF525252FD057D52A8FD%15FF52527D7D7D27FD04527DFFFD0452277D5252277DA8527DFF7D527D27%7D272727527DFD22FF7D527D52527D52527D277DFFA8527D527D277D277D%27FF525252FF2752527D527D27A852A8FD22FF7DFD0CFF7DFFFFFFA87DFD%34FF7DFD0CFF7DFFFFFF7DA8FDFCFFFD2DFF7DFFFF52FD42FFA852FF52FD%36FF7D527D7DFD42FF7D7D52FF7DFD35FF7D527D52FD42FF7D527DFF7DFD%35FF52FFFF7DFD43FF7DFF7DA8FD93FFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%ADOBeginClientInjection: DocumentProlog Start "AI10"%ADOEndClientInjection: DocumentProlog Start "AI10"%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 60 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 		exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def	/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup /Cyan eq{						pop (_Cyan_)					}{						dup /Magenta eq{							pop (_Magenta_)						}{							dup /Yellow eq{								pop (_Yellow_)							}{								dup /Black eq{									pop (_Black_)								}{									dup () cvn eq{										pop (Process)									}if								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def		/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust		AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer		AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse		AGMUTIL_GSTATE_flt setflat	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/rdline{	currentfile AGMUTIL_str256 readline pop} bdf/rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def				AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/AGMUTIL_imagefile nd/AGMUTIL_imbuf nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put	exch	load exec}def/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMUTIL_imbuf readstring pop			}{				exec			} ifelse			AGMUTIL_imagefile exch writestring		}for		true	}ifelse	end}def/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}def/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 205 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_will_host_separate xdf	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if			/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 8 def													/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						currentpagedevice/OverrideSeparations known							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				true exch					{					convert_spot_to_process and					}				forall				}{				false exch					{					convert_spot_to_process or					}				forall				}ifelse			}ifelse		}def	}ifelse		AGMCORE_host_sep AGMCORE_will_host_separate not and {		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def		AGMCORE_color_space_onhost_seps	}if	/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/clip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&clip /clip load put			/clip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&clip			}def		}if		/eoclip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put			/eoclip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&eoclip			}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{					/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop																	[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 exch put					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 exch put						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				AGMCORE_&&&setcolorspace			}def		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 		current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave 		dup begin		1 setgray		0 0 ImageMatrix itransform 		Width Height ImageMatrix idtransform rectfill 		end		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/get_csd_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		/AGMCORE_CSD_Name xdf		AGMCORE_CSD_cache		{			dup /Name get AGMCORE_CSD_Name eq			{				exch pop exit			}{				pop			}ifelse			pop		}forall		end	}if}def/cachepattern_level2{	4 dict begin	/comparebuffer exch def	/holdbuffer exch def	/readbuffer 1024 string def	/LZWFilter holdbuffer /LZWEncode filter def	{		currentfile readbuffer readline not			{pop exit}		if		dup LZWFilter exch writestring		LZWFilter (\n) writestring		comparebuffer eq			{exit}		if	}loop	LZWFilter closefile	end}def/cachepattern_level3{	3 dict begin	/comparebuffer exch def	/readbuffer 1024 string def	/DoEOL false def	{ 		DoEOL			{			(\n)			/DoEOL false def			}			{			currentfile readbuffer readline not				{pop ()}				{				dup length 0 eq					{ pop(\n)}					{					dup comparebuffer eq						{pop ()}						{/DoEOL true def}					ifelse					}				ifelse				}			ifelse			}		ifelse	} /ReusableStreamDecode filter	end}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix	makepattern}def/exec_file	statusdict /currentfilenameextend known{		{			0 () /SubFileDecode filter cvx exec		}	}{				{cvx exec}	}ifelsedef/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias		/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput		Adobe_AGM_Core begin	/setcustomcolor	{				dup /customcolor_tint exch AGMCORE_gput				current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		fill grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		currentdict /lw_initializepage known not			{			/lw_initializepage /initializepage load def			/initializepage				{				lw_initializepage				/initializepage {} def				}def			}if		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if		Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put}def/driver_check_media_override{	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne	{		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix	}if}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.12 0%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.12 0userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dictdef}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Databegin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/argsexch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}ifdup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exchgetinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get endcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 subdef/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvxexch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname geterrordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashowload def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdictAdobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup where pop exch get/globaldictwhere{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{poppop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict endexch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal duplength array copy exch setglobal}bind def/newencodedfont{currentglobal{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory3 index get/FontReferenced known}{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exchdup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if defcurrentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategiesknown{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlengthadd dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init getexec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}binddef/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSubtrue def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfontexch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 31}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getintervalcvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exchdefinefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup lengthexch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add addgetinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloadedknown{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparamswhere dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 getbegin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128string def/$slen 0 def/$sname null def/$match false def/$fontname null def/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname nulldef/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFontexch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exchdefinefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfontcc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}binddef currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontnameexch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch putdup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exchmoveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsaveLevel2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall popgrestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobalexch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontNameknown{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dupbegin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dupsin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict end definefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$ObliqueSetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slengetinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exchputinterval/$match false def $SubstituteFont/$dstack countdictstack arraydictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forallpop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch poppop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]defend def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dictdup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copiedexch definefont 3 copy put pop pop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapnamelength add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontnameexch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo getdup/Registry get Registry eq exch/Ordering get Ordering eq and and{exchrestore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end endcurrentdict/$error known currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gtand{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMapfindresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index subexch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getintervalexch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelseend}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfontload put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontNameknown{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFoundtrue def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print( substitution revised, using )print dup/FontName known{dup/FontName get}{(unspecified font)}ifelse $str cvs print(.)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end endAdobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategyknown{$Strategy/$BuildFont get exec}if}if end}bind put}if end end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.%%Version: 1.13 0systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelseexch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exchdef/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun knownnot ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont knowndef/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevelknown{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFontfindresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exchlength sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFontfindresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vmexch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vmsetglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcodeexch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod putstringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 31 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvmsetglobal}if end}def/:{string currentfile exch readstring pop}executeonly defend ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.0010 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx excherrordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get(Error: )print dup(                    )cvs print errordict exch get exec stop}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dupstring/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 indexadd 2 index length le{2 index getinterval dst_string dst_index 2 indexputinterval length dst_index add/dst_index exch def exit}{1 index length 1index sub dup 4 1 roll getinterval dst_string dst_index 2 index putintervalpop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}looppop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomarkcurrentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresourcebegin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecodefilter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal/Generic/Category findresource dup length dict copy dup/InstanceType/dicttypeput/CIDFont exch/Category defineresource pop setglobal}ifelsect_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMapdefineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2copy known{get dup dup maxlength exch length eq{dup length 10 add dict copyct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copyknown{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelseload exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZEle{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec popdup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop popfalse exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArrayget 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop poppop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 01 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSETcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exchcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 rollGlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontNamecurrentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartDatact_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSetct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInitct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSetdefineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSetdefineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index beginCIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCodeexch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 rolltrue charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidthmoveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aloadpop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dupmaxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdictend/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring putrootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfontct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidthsetlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDictct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dupct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Privateget mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse getexec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get beginct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encodingct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load defct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string defcurrentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dupnot{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WModeexch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrixmatrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}ifdef/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if arraydef BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProcknown{CIDFont/CDevProc get/CDevProc exch def}if currentdict endBaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVectorexch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 muldef FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefontsetfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths getbegin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astoredef}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop popexch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMapct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}binddef currentdict readonly pop end end%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Gradient 1.1 0%%Version: 1.1 0%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Gradient 190 dict dup begin put/AGMGrad_&image nd/AGMGrad_&colorimage nd/AGMGrad_&fill nd/AGMGrad_subSampleOK nd/AGMGrad_d255 nd/AGMGrad_sSave nd/AGMGrad_dUserSpace nd/AGMGrad_bUMatrix nd/AGMGrad_imageMatrix nd/AGMGrad_saveMatrix nd/AGMGrad_gMatrix nd/AGMGrad_tmpMat nd/AGMGrad_currentcolorspace nd/AGMGrad_bbox nd/AGMGrad_usingShells nd/AGMGrad_byte nd/AGMGrad_blackTmp nd/AGMGrad_yellowTmp nd/AGMGrad_magentaTmp nd/AGMGrad_cyanTmp nd/AGMGrad_cnt nd/AGMGrad_usingSmoothShade nd/AGMGrad_index nd/AGMGrad_rampFuncsArray nd/AGMGrad_boundsArray nd/AGMGrad_encodeArray nd/AGMGrad_beginCoord nd/AGMGrad_colorSpace nd/AGMGrad_firstFill nd/AGMGrad_lastFill nd/AGMGrad_size nd/AGMGrad_rampLen nd/AGMGrad_invert nd/AGMGrad_endCoord nd/AGMGrad_s nd/AGMGrad_j nd/AGMGrad_i nd/AGMGrad_tintNdx nd/AGMGrad_cmpNdx nd/AGMGrad_nColorSpace nd/AGMGrad_C0 nd/AGMGrad_C0_Space nd/AGMGrad_C1 nd/AGMGrad_C1_Space nd/AGMGrad_rampColorSpace nd/AGMGrad_bUMatrix nd/AGMGrad_channels nd/AGMGrad_len nd/AGMGrad_currenttint nd/AGMGrad_currentcolorant nd/AGMGrad_cmpIndx nd/AGMGrad_ndx nd/AGMGrad_rampIndex nd/AGMGrad_firstShell nd/AGMGrad_ramp nd/AGMGrad_rampDict nd/AGMGrad_endPoint nd/AGMGrad_rampPoint nd/AGMGrad_midPoint nd/AGMGrad_colorRamp nd/AGMGrad_nSamples nd/AGMGrad_sInc nd/AGMGrad_bInc nd/AGMGrad_nSubSamples nd/AGMGrad_optimize nd/AGMGrad_nRadSamples nd/AGMGrad_uRampLen nd/AGMGrad_pChange nd/AGMGrad_xBCInc nd/AGMGrad_yBCInc nd/AGMGrad_nColorsBd nd/AGMGrad_gradType nd/AGMGrad_gradName nd/AGMGrad_renderFlag nd/AGMGrad_retainPath nd/AGMGrad_enabledSmoothShade nd/AGMGrad_rampData nd/AGMGrad_nRamps nd/AGMGrad_xHi nd/AGMGrad_yHi nd/AGMGrad_radHilite nd/AGMGrad_gradNames nd		/AGMGrad_tint nd/AGMGrad_tint_min nd/AGMGrad_tint_max nd/AGMGrad_range nd/doc_setup{	Adobe_AGM_Core begin	Adobe_AGM_Gradient begin	initializeVars		level2{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeShading	/image where{		/image get /AGMGrad_&image xp	}if	/colorimage where{		/colorimage get /AGMGrad_&colorimage xp	}if	currentdict /AGMGrad_&fill get type /nulltype eq		{		/AGMGrad_&fill /fill load def		}if	end	end}def/doc_trailer{	currentdict Adobe_AGM_Gradient eq{		end	}if}def /page_setup{	Adobe_AGM_Gradient begin	/AGMGrad_subSampleOK 		AGMCORE_deviceDPI AGMGrad_dpiThreshold le 		currentScreenFreq AGMGrad_screenFreqThreshold le and 		AGMGrad_contoneDevice not and 	def	initializeRectFill	AGMCORE_producing_seps{		initializeSep	}{		initializeComposite	}ifelse	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	end}def/page_trailer{}def/initializeVars{	/AGMGrad_d255 256 array def	0 1 255{		AGMGrad_d255 exch dup 255 div put	}bind for	/AGMGrad_sSave nd	/AGMGrad_dUserSpace matrix defaultmatrix def	/AGMGrad_bUMatrix matrix def	/AGMGrad_imageMatrix matrix def	/AGMGrad_saveMatrix matrix def	/AGMGrad_gMatrix matrix def	/AGMGrad_tmpMat matrix def	/AGMGrad_currentcolorspace nd	/AGMGrad_bbox 4 array def	/AGMGrad_black (/AGM_Black) def}def/queryDevice{	/AGMGrad_PathsOnly false ndf	/AGMGrad_useShells false ndf	/AGMGrad_usingShells AGMGrad_useShells pt	/AGMGrad_useSmoothShade true ndf	/AGMGrad_dpiThreshold 600 ndf	/AGMGrad_screenFreqThreshold 150 ndf	/AGMGrad_contoneDevice false ndf}def/initializeRectFill{	/rectfill where dup{		exch pop not AGMCORE_producing_seps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if}def/initializeLev1{	/AGMGrad_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/AGMGrad_blackTmp xp			/AGMGrad_yellowTmp xp			/AGMGrad_magentaTmp xp			/AGMGrad_cyanTmp xp			/AGMGrad_cnt 0 pt						[			AGMGrad_byte dup 0			AGMGrad_cyanTmp 				/AGMGrad_cnt cvx /get cvx AGMGrad_d255 /exch cvx /get cvx .3 /mul cvx			AGMGrad_magentaTmp				/AGMGrad_cnt cvx /get cvx AGMGrad_d255 /exch cvx /get cvx .59 /mul cvx			AGMGrad_yellowTmp				/AGMGrad_cnt cvx /get cvx AGMGrad_d255 /exch cvx /get cvx .11 /mul cvx			AGMGrad_blackTmp 				/AGMGrad_cnt cvx /get cvx AGMGrad_d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/AGMGrad_cnt dup cvx 1 /add cvx /pt cvx			] cvx bind						AGMGrad_&image		}def	}ifelse		/setcolor nd	/currentcolor nd		/setcolorspace	{		0 get /AGMGrad_currentcolorspace xp		AGMGrad_currentcolorspace /DeviceCMYK eq{			/setcolor {setcmykcolor} bind pt			/currentcolor {currentcmykcolor} bind pt		}{			AGMGrad_currentcolorspace /DeviceGray eq{				/setcolor {setgray} bind pt				/currentcolor {currentgray} bind pt			}{				AGMGrad_currentcolorspace /DeviceRGB eq{					/setcolor {setrgbcolor} bind pt					/currentcolor {currentrgbcolor} bind pt				}if			}ifelse		}ifelse	}def	/currentcolorspace	{		[ AGMGrad_currentcolorspace ]	}def	/dictImage	{		pop		currentcolorspace 0 get /DeviceGray eq {			aload pop			AGMGrad_&image		}{			dup length /AGMGrad_tmp xp			aload pop true AGMGrad_tmp			colorimage		}ifelse	}def}def/initializeLev2{	/dictImage	{		10 dict begin			/Decode xdf			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			DataSource type /arraytype eq{				/MultipleDataSources true def			}if			currentdict		end		AGMGrad_&image	}def}def/initializeShading{	AGMGrad_useSmoothShade level3 and{		/AGMGrad_usingSmoothShade true pt		initializeLev3_Ops	}{		/AGMGrad_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/AGMGrad_index AGMGrad_gradType 0 eq {0}{AGMGrad_maxRampIndex} ifelse pt		/AGMGrad_rampFuncsArray AGMGrad_nRamps array pt		/AGMGrad_boundsArray AGMGrad_nRamps 1 sub array pt		/AGMGrad_encodeArray AGMGrad_nRamps 2 mul array pt		/AGMGrad_beginCoord AGMGrad_rampPoint pt		/AGMGrad_colorSpace null pt		/AGMGrad_firstFill AGMGrad_rampIndex AGMGrad_maxRampIndex eq pt		/AGMGrad_lastFill false pt	}def	/linealShFill{		popRampSpace		AGMGrad_gMatrix pushRampSpace				/AGMGrad_size AGMGrad_index 1 add pt		AGMGrad_size AGMGrad_nRamps lt {			/AGMGrad_rampFuncsArray AGMGrad_rampFuncsArray 0 AGMGrad_size getinterval pt			/AGMGrad_boundsArray AGMGrad_boundsArray 0 AGMGrad_size 1 sub getinterval pt			/AGMGrad_encodeArray AGMGrad_encodeArray 0 AGMGrad_size 2 mul getinterval pt		}if				/AGMGrad_rampLen AGMGrad_endCoord AGMGrad_beginCoord sub pt		bdict			/ShadingType 2			/ColorSpace AGMGrad_colorSpace			/Function 				bdict					/FunctionType 3					/Domain [0 1]					/Functions AGMGrad_rampFuncsArray					/Bounds AGMGrad_boundsArray					/Encode AGMGrad_encodeArray				edict				AGMGrad_nRamps 1 gt{					dup begin					/Bounds [ Bounds {AGMGrad_beginCoord sub AGMGrad_rampLen div} forall] def					end				}if			/Extend [AGMGrad_firstFill AGMGrad_lastFill]			/Domain [0 1] 			/Coords [AGMGrad_beginCoord 0 AGMGrad_endCoord 0]		edict		shfill	}def		/radialShFill{		/AGMGrad_size AGMGrad_nRamps AGMGrad_index sub pt		AGMGrad_size AGMGrad_nRamps lt {			/AGMGrad_rampFuncsArray AGMGrad_rampFuncsArray AGMGrad_index AGMGrad_size getinterval pt			/AGMGrad_boundsArray AGMGrad_boundsArray AGMGrad_index AGMGrad_size 1 sub getinterval pt			/AGMGrad_encodeArray AGMGrad_encodeArray AGMGrad_index 2 mul AGMGrad_size 2 mul getinterval pt		}if				/AGMGrad_rampLen AGMGrad_beginCoord AGMGrad_endCoord sub pt		bdict			/ShadingType 3			/ColorSpace AGMGrad_colorSpace			/Function 				bdict					/FunctionType 3					/Domain [0 1]					/Functions AGMGrad_rampFuncsArray					/Bounds AGMGrad_boundsArray					/Encode AGMGrad_encodeArray				edict				AGMGrad_nRamps 1 gt{					dup begin					/Bounds [ Bounds {AGMGrad_endCoord sub AGMGrad_rampLen div} forall] def					end				}if			/Extend [AGMGrad_lastFill				systemdict/setdistillerparams known AGMCORE_distilling not and				{				AGMGrad_firstFill				}{				false				}ifelse				]			/Domain [0 1] 			/Coords [AGMGrad_xHi AGMGrad_rampLen mul AGMGrad_yHi AGMGrad_rampLen mul AGMGrad_endCoord 0 0 AGMGrad_beginCoord] 		edict		shfill				AGMGrad_radHilite{			AGMGrad_xHi AGMGrad_rampLen mul AGMGrad_yHi AGMGrad_rampLen mul translate		}if	}def		/sampFunc{		/AGMGrad_tmp exch pt		bdict			/FunctionType 0			/Order 1			/Size [AGMGrad_tmp length]			/Domain [0 1]			/BitsPerSample 8			/DataSource AGMGrad_tmp			/Range [0 1]		edict	}def		/fillRamp{				/AGMGrad_invert AGMGrad_midPoint 0.5 lt pt		AGMGrad_rampIndex AGMGrad_maxRampIndex eq {			initShFill		}if				getRampColorSpace				AGMGrad_colorSpace null eq{			/AGMGrad_colorSpace AGMGrad_rampColorSpace pt		}{			AGMGrad_colorSpace AGMGrad_rampColorSpace ne {				/AGMGrad_index AGMGrad_index 1 				AGMGrad_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/AGMGrad_colorSpace AGMGrad_rampColorSpace pt			} if		}ifelse		/AGMGrad_endCoord AGMGrad_endPoint pt					Interpolation{			false		}{			SpotColor{				false			}{				AGMCORE_is_cmyk_sep			}ifelse		}ifelse				{ 			AGMCORE_composite_job{											/AGMGrad_s NumSamples NumComponents mul string def				/AGMGrad_j 0 pt				0 1 NumSamples 1 sub {					/AGMGrad_i exch pt					0 1 NumComponents 1 sub {						Ramp exch get AGMGrad_i get AGMGrad_s AGMGrad_j 3 -1 roll put 						/AGMGrad_j AGMGrad_j 1 add pt					}for				}for								AGMGrad_rampFuncsArray AGMGrad_index				bdict					/FunctionType 0					/Order 1					/Size [NumSamples]					/Domain [0 1]					/BitsPerSample 8					/DataSource AGMGrad_s					/Range [NumComponents {0 1} repeat]				edict				put			}{				AGMGrad_rampFuncsArray AGMGrad_index					AGMCORE_cyan_plate{						Ramp 0 get					}if					AGMCORE_magenta_plate{						Ramp 1 get					}if					AGMCORE_yellow_plate{						Ramp 2 get					}if					AGMCORE_black_plate{						Ramp 3 get					}if					sampFunc					dup begin /Decode [1 0] def end				put			}ifelse			/AGMGrad_invert false pt		}{						AGMGrad_rampFuncsArray AGMGrad_index				bdict					/FunctionType 2					/Domain [0 1]					/N 0.5 log AGMGrad_invert{1 AGMGrad_midPoint sub}{AGMGrad_midPoint}ifelse log div					AGMGrad_gradType 0 eq{						AGMGrad_invert{/C1}{/C0}ifelse AGMGrad_C0						AGMGrad_invert{/C0}{/C1}ifelse AGMGrad_C1					}{						AGMGrad_invert{/C0}{/C1}ifelse AGMGrad_C1						AGMGrad_invert{/C1}{/C0}ifelse AGMGrad_C0					}ifelse				edict			put		}ifelse				AGMGrad_rampIndex 0 ne{			AGMGrad_boundsArray AGMGrad_index AGMGrad_gradType 1 eq{1 sub}if AGMGrad_endCoord put		} if				0 1 AGMGrad_invert {exch}if		AGMGrad_encodeArray AGMGrad_index 2 mul 1 add 3 -1 roll put		AGMGrad_encodeArray AGMGrad_index 2 mul 3 -1 roll put		AGMGrad_rampIndex 0 eq {			/AGMGrad_lastFill true pt			AGMGrad_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/AGMGrad_index AGMGrad_index 1 		AGMGrad_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def}def/initializeComposite{	AGMGrad_PathsOnly not level2 not and{		/linealFill{			8 setImageParms			AGMGrad_colorRamp{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 AGMGrad_&colorimage			}{				currentgray makeByte8 AGMGrad_&image 			}ifelse		}def	}if	level3{		/getRampColorSpace{			SpotColor{						[					NumTintComponents 2 eq					{						/DeviceN 							[							Colorants 0 get							substituteBlack							Colorants 1 get							substituteBlack							] 					}{						/Separation						Colorants 0 get						substituteBlack					}ifelse					CSA map_csa 					[						/AGMGrad_range NumTintComponents 2 eq {1} {0} ifelse pt						/AGMGrad_tint_range_0 TintRange AGMGrad_range get 0 get pt						/AGMGrad_tint_range_1 TintRange AGMGrad_range get 1 get pt						AGMGrad_tint_range_0 AGMGrad_tint_range_1 2 copy gt{							/AGMGrad_tint_min xdf							/AGMGrad_tint_max xdf						}{							/AGMGrad_tint_max xdf							/AGMGrad_tint_min xdf						}ifelse						NumTintComponents 1 eq						{							Colorants 0 get get_csd_by_name	/ColorLookup get							/exch cvx 255 /mul cvx /cvi cvx /get cvx							/aload cvx /pop cvx						}{							/exch cvx  /pop	cvx								255 /mul cvx /cvi cvx							/AGMGrad_tint /xp cvx							/AGMGrad_TintRamp TintRamp 1 get def						 							0 1 NumComponents 1 sub{								Ramp exch get dup type /stringtype eq 									{									6 dict begin									/AGMGrad_Ramp xp									/AGMGrad_lookup 256 string def									/AGMGrad_min AGMGrad_TintRamp 0 get def									/AGMGrad_max AGMGrad_TintRamp dup length 1 sub get def									/AGMGrad_index 0 def									0 1 AGMGrad_min										{										AGMGrad_lookup exch AGMGrad_Ramp 0 get put										}for									AGMGrad_max 1 255										{										AGMGrad_lookup exch AGMGrad_Ramp dup length 1 sub get put										}for									AGMGrad_min 1 AGMGrad_max										{										/AGMGrad_count xp										AGMGrad_index 1 AGMGrad_TintRamp length 2 sub											{											AGMGrad_TintRamp exch get AGMGrad_count ge												{												exit												}if											/AGMGrad_index AGMGrad_index 1 add def											}for										AGMGrad_lookup AGMGrad_count										AGMGrad_Ramp AGMGrad_index get										put										}for																			AGMGrad_lookup /AGMGrad_tint cvx /get cvx 255 /div cvx									end									}{pop 0}ifelse							}for						}ifelse					] cvx				] setcolorspace				/AGMGrad_nColorSpace currentcolorspace pt			}if						AGMGrad_nSamples 1 gt{ 				firstRampColor			}if			SpotColor{				/AGMGrad_C0 [					currenttints 0 get					currenttints length 2 eq{						currenttints 1 get					}if				] pt				/AGMGrad_C0_Space AGMGrad_nColorSpace pt			}{				/AGMGrad_C0 [currentcolor] pt				/AGMGrad_C0_Space currentcolorspace pt			}ifelse			AGMGrad_nSamples 1 gt{ 				lastRampColor			}if			SpotColor{				/AGMGrad_C1 [					currenttints 0 get					currenttints length 2 eq{						currenttints 1 get					}if				] pt				/AGMGrad_C1_Space AGMGrad_nColorSpace pt			}{				/AGMGrad_C1 [currentcolor] pt				/AGMGrad_C1_Space currentcolorspace pt			}ifelse						/AGMGrad_rampColorSpace AGMGrad_C0_Space pt					}def	}if}def/npop{	{pop}repeat}def/pt{	Adobe_AGM_Gradient 3 1 roll put}def/xp{	exch pt}def/mySave{	save /AGMGrad_sSave xp}def/myRestore{	AGMGrad_sSave type /savetype eq{		AGMGrad_sSave restore	}if}def/pushRampSpace{	newpath gsave	dup /AGMGrad_bUMatrix xp concat }def/popRampSpace{	grestore}def/makeByte8{	/AGMGrad_tmp 0 pt	255 mul cvi	8 string 8{		dup AGMGrad_tmp 3 index put 		/AGMGrad_tmp AGMGrad_tmp 1 add pt	}repeat	exch pop}def/setImageParms{	1 8 2 index 0 0 1 0 0 AGMGrad_imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/path_bbox{	{currentpoint} stopped {		0 0 0 0	}{		pop pop		pathbbox	}ifelse}def/expandOne	{	/AGMGrad_tmp xp	dup type /stringtype ne{		AGMGrad_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 AGMGrad_tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/AGMGrad_channels xp	/AGMGrad_len xp	AGMGrad_channels{		AGMGrad_len expandOne AGMGrad_channels 1 roll	}repeat}def/substituteBlack{	dup AGMGrad_black eq{		pop /Black	}if}def/settints{	/AGMGrad_currenttint xp}def/currenttints{	AGMGrad_currenttint}def/setcolorants{	/AGMGrad_currentcolorant xp}def/currentcolorants{	AGMGrad_currentcolorant}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/rampColor{			/AGMGrad_cmpIndx 0 pt	AGMCORE_producing_seps not SpotColor and AGMGrad_enabledSmoothShade and not{		NumComponents{			Ramp AGMGrad_cmpIndx get dup type /stringtype eq{				/AGMGrad_ndx cvx /get cvx AGMGrad_d255 /exch cvx /get cvx			}if			/AGMGrad_cmpIndx AGMGrad_cmpIndx 1 add pt		}repeat		{			currentdict/Decode known{				0 2 NumComponents 2 mul 1 sub{					/AGMGrad_i xp					NumComponents -1 roll					Decode AGMGrad_i 1 add get 					Decode AGMGrad_i get 					sub mul 					Decode AGMGrad_i get add				}for			}if			setcolor		} bind /exec cvx	}if	AGMCORE_producing_seps AGMGrad_enabledSmoothShade or SpotColor and{		/mark cvx		TintRamp 0 get dup type /stringtype eq{			/AGMGrad_ndx cvx /get cvx AGMGrad_d255 /exch cvx /get cvx		}if		NumTintComponents 2 eq{			 TintRamp 1 get dup type /stringtype eq{				/AGMGrad_ndx cvx /get cvx AGMGrad_d255 /exch cvx /get cvx			}if		}if		(]) cvn cvx		/settints cvx		Colorants /setcolorants cvx	}if}def/firstRampColor{	/AGMGrad_ndx 0 pt	[rampColor] cvx exec}def			/lastRampColor{	/AGMGrad_ndx AGMGrad_nSamples 1 sub pt	[rampColor] cvx exec}def			/useRectImage{	AGMGrad_subSampleOK AGMGrad_usingSmoothShade not and{		0 1 dtransform atan cvi 90 mod 0 eq		1 0 dtransform atan cvi 90 mod 0 eq		and	}{		false	}ifelse}def/linealImage{	useRectImage AGMGrad_PathsOnly or{		rectImage	}{		rampImage	}ifelse}def/linealRamp{	pushRampSpace	AGMGrad_ramp{		linealImage	}{		linealFill	}ifelse	popRampSpace	/AGMGrad_rampIndex AGMGrad_rampIndex 1 sub pt	AGMGrad_rampIndex 0 ge{		getRampData	}if}def/radialGrad{	/AGMGrad_usingShells currentoverprint AGMCORE_producing_seps and AGMGrad_usingShells or pt		/AGMGrad_firstShell true pt	currentoverprint AGMCORE_producing_seps and{				newpath		clippath path_bbox 		1 add 4 1 roll		1 add 4 1 roll		1 sub 4 1 roll		1 sub 4 1 roll		AGMGrad_bbox astore pop				newpath		AGMGrad_bbox 0 get AGMGrad_bbox 1 get moveto		AGMGrad_bbox 2 get AGMGrad_bbox 1 get lineto		AGMGrad_bbox 2 get AGMGrad_bbox 3 get lineto		AGMGrad_bbox 0 get AGMGrad_bbox 3 get lineto		closepath		dup		gsave dup /AGMGrad_bUMatrix xp concat		AGMGrad_rampPoint 0 moveto 0 0 AGMGrad_rampPoint 0 360 arc closepath		eoclip fill		popRampSpace	}if	pushRampSpace		AGMGrad_radHilite{		AGMGrad_rampPoint 1 lt{			1 AGMGrad_rampPoint sub dup AGMGrad_xHi mul exch AGMGrad_yHi mul translate		}if	}if	AGMGrad_nRamps{		radialRamp		/AGMGrad_rampIndex AGMGrad_rampIndex 1 sub pt		AGMGrad_rampIndex 0 ge{			getRampData		}if	}repeat		popRampSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/AGMGrad_ramp true pt		AGMGrad_rampDict null ne{		end	}if	/AGMGrad_rampDict AGMGrad_rampData AGMGrad_rampIndex get pt	AGMGrad_rampDict begin				Start End		AGMGrad_gradType 1 eq{			exch		}if		/AGMGrad_endPoint xp		/AGMGrad_rampPoint xp		/AGMGrad_midPoint Mid pt		/AGMGrad_colorRamp CSA map_csa 0 get /DeviceGray ne pt		currentdict set_csa_crd		SpotColor AGMCORE_producing_seps and{						/SpotConverted [				0 AGMGrad_SpotConverted				NumTintComponents 2 eq{					1 AGMGrad_SpotConverted				}{					false				}ifelse			] def			/RenderCMYK SpotConverted aload pop or def		}{			/RenderCMYK true def		}ifelse		AGMGrad_ramp{			/AGMGrad_nSamples NumSamples pt			AGMGrad_enabledSmoothShade not{				/AGMGrad_ramp AGMGrad_nSamples 1 gt pt			}if		}if}def/rampImage{	AGMGrad_enabledSmoothShade{		fillRamp	}{		NumSamples setImageParms		[ Ramp aload pop ]		currentdict/Decode known{			Decode		}{			[ NumComponents {0 1} repeat ]		}ifelse		dictImage	}ifelse}def	/rectImage{	gsave	/AGMGrad_sInc 1 pt	/AGMGrad_bInc 1 AGMGrad_nSamples div pt	/AGMGrad_nSubSamples AGMGrad_nSamples pt	/AGMGrad_optimize false pt			AGMGrad_subSampleOK{		/AGMGrad_uRampLen 1 0 dtransform AGMGrad_dUserSpace idtransform dup mul exch dup mul add sqrt pt		/AGMGrad_pChange AGMGrad_uRampLen 0 eq{0}{AGMGrad_nSamples AGMGrad_uRampLen div}ifelse pt				AGMGrad_pChange .5 gt dup /AGMGrad_optimize xp{			/AGMGrad_nSubSamples AGMGrad_uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/AGMGrad_bInc 1 AGMGrad_nSubSamples div pt			/AGMGrad_sInc AGMGrad_nSamples 1 sub AGMGrad_nSubSamples 1 sub div pt		}if	}if		0	AGMGrad_nSubSamples	[	/dup cvx	AGMGrad_optimize {		/round cvx /cvi cvx	} if	/AGMGrad_ndx /exch cvx /pt cvx	rampColor	0 0 AGMGrad_bInc 1 /rectfill cvx	AGMGrad_bInc 0 /translate cvx	AGMGrad_sInc /add cvx	] cvx bind	repeat	pop	grestore}def/radialInit{	/AGMGrad_nRadSamples AGMGrad_nSamples dup 0 eq{pop 1}if pt	/AGMGrad_sInc -1 pt	/AGMGrad_rampLen AGMGrad_rampPoint AGMGrad_endPoint sub pt	/AGMGrad_bInc AGMGrad_rampLen AGMGrad_nSamples div neg pt	/AGMGrad_optimize false pt	AGMGrad_subSampleOK{		/AGMGrad_uRampLen			AGMGrad_rampLen 0 dtransform AGMGrad_dUserSpace idtransform dup mul exch dup mul add sqrt			0 AGMGrad_rampLen dtransform AGMGrad_dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/AGMGrad_pChange 			AGMGrad_uRampLen 0 eq{				0			}{				AGMGrad_nSamples AGMGrad_uRampLen div			}ifelse		pt		AGMGrad_pChange .5 gt dup /AGMGrad_optimize xp{			/AGMGrad_nRadSamples AGMGrad_uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/AGMGrad_bInc AGMGrad_rampLen AGMGrad_nRadSamples div neg pt			/AGMGrad_sInc AGMGrad_nSamples 1 sub AGMGrad_nRadSamples 1 sub div neg pt		}if	}if	AGMGrad_radHilite{		/AGMGrad_xBCInc AGMGrad_xHi AGMGrad_rampLen mul AGMGrad_nRadSamples div pt		/AGMGrad_yBCInc AGMGrad_yHi AGMGrad_rampLen mul AGMGrad_nRadSamples div pt	}if}def/radialRamp{	AGMGrad_enabledSmoothShade{		fillRamp	}{		/AGMGrad_saveMatrix AGMGrad_saveMatrix currentmatrix pt				radialInit			true		AGMCORE_producing_seps Interpolation and{			AGMGrad_nSamples 1 gt{ 				pop				firstRampColor currentInkN				lastRampColor currentInkN				or			}if		}if		{			AGMGrad_rampPoint					AGMGrad_nSamples 1 sub					AGMGrad_nRadSamples 			[				/dup cvx						AGMGrad_optimize{					/round cvx /cvi cvx				}if						/AGMGrad_ndx /exch cvx /pt cvx								AGMGrad_usingShells{					/AGMGrad_firstShell cvx{						/AGMGrad_firstShell false pt					}{						0 0 3 index 360 0 arcn fill					}/ifelse cvx				}if						rampColor						AGMGrad_usingShells{					0 0 3 /index cvx 0 360 /arc cvx 				}{					0 0 3 /index cvx 0 360 /arc cvx /fill cvx				}ifelse						/exch cvx AGMGrad_bInc /add cvx /exch cvx						AGMGrad_sInc /add cvx						AGMGrad_radHilite{					AGMGrad_xBCInc AGMGrad_yBCInc /translate cvx				}if			] cvx bind			repeat					pop pop		}{			AGMGrad_usingShells{				0 0 AGMGrad_rampPoint 360 0 arcn fill			}if		}ifelse			AGMGrad_saveMatrix setmatrix				AGMGrad_radHilite{			AGMGrad_xHi AGMGrad_rampLen mul AGMGrad_yHi AGMGrad_rampLen mul translate		}if				AGMGrad_usingShells AGMGrad_rampIndex 0 eq and{			fill		}if		}ifelse}def/matrix_invertible{	{		mark 1 index AGMGrad_tmpMat invertmatrix	} stopped {		cleartomark		pop		false	}{		cleartomark		pop		true	}ifelse}def/Gb{	Adobe_AGM_Gradient begin	/AGMGrad_rampDict null pt	mySave}def/Gd{	Adobe_AGM_Gradient begin	/AGMGrad_nColorsBd xp	/AGMGrad_gradType xp	/AGMGrad_gradName xp	[	[}def/Gm{	AGMGrad_renderFlag 2 ne{		AGMGrad_gradType 0 eq{			linealRamp		}{			radialGrad		}ifelse	}{		pop	}ifelse}def	/Gg{	/AGMGrad_gMatrix xp	4 npop	/AGMGrad_gradName xp	/AGMGrad_renderFlag xp	/AGMGrad_retainPath xp	/AGMGrad_enabledSmoothShade false pt		path_bbox 3 index 2 index eq{		2 index 1 index eq{			/AGMGrad_renderFlag 2 pt		}if	}if		AGMGrad_gMatrix matrix_invertible not{		/AGMGrad_renderFlag 2 pt	}if		4 npop 	AGMGrad_renderFlag 2 ne{		/AGMGrad_enabledSmoothShade 			level3{				AGMGrad_usingSmoothShade				AGMCORE_producing_seps not				currentoverprint not or and				AGMGrad_PathsOnly not and				AGMCORE_in_rip_sep 1 currenttransfer exec 0.5 lt and not and			}{				false			}ifelse		pt				AGMGrad_renderFlag 3 eq{			eoclip		}{			clip		}ifelse					AGMGrad_gradNames AGMGrad_gradName known{			AGMGrad_gradNames AGMGrad_gradName get			aload pop			/AGMGrad_gradType xp			2 sub dup /AGMGrad_rampIndex xp			/AGMGrad_maxRampIndex xp			/AGMGrad_rampData xp			/AGMGrad_nRamps AGMGrad_rampData length pt		}if		getRampData				AGMGrad_enabledSmoothShade{			getRampColorSpace		}if				AGMGrad_gradType 0 eq{			firstRampColor		}{			lastRampColor		}ifelse						currentcolorspace 0 get /DeviceN eq{			currenttints 0 get			currenttints length 2 eq{				currenttints 1 get			}if			setcolor		}if				currentcolorspace 0 get /Separation eq{			currenttints 0 get			setcolor		}if						currentoverprint AGMCORE_producing_seps and not{			gsave fill grestore		}if	}if		AGMGrad_gradType 1 eq{		AGMGrad_gMatrix Gm	}if}def/Gh{	dup 1 gt{		pop 1	}if	2 copy	exch dup sin exch cos	2 index mul exch	2 index mul 	neg /AGMGrad_yHi xp	/AGMGrad_xHi xp	/AGMGrad_radHilite AGMGrad_xHi 0 ne AGMGrad_yHi 0 ne or pt	3 npop}def/Gc{		AGMGrad_renderFlag 2 eq	AGMGrad_enabledSmoothShade or{		pop	}{		dup matrix_invertible{			AGMGrad_gMatrix AGMGrad_tmpMat concatmatrix			pushRampSpace			AGMGrad_rampIndex 0 lt{				lastRampColor			}if			linealFill			popRampSpace		}{			pop		}ifelse	}ifelse}def/Gr{	dup matrix_invertible{		AGMGrad_gMatrix AGMGrad_tmpMat concatmatrix		Gm	}{		pop	}ifelse}def/GB{	AGMGrad_rampDict null ne{		end	}if	AGMGrad_retainPath	myRestore	end	not{		newpath	}if}def/GD{	currentdict/AGMGrad_gradNames get null eq{		/AGMGrad_gradNames 20 dict def	}if	]	dup {		begin			/Ramp [ Ramp 0 NumComponents getinterval aload pop NumSamples NumComponents expandColor ] def			currentdict/Colorant known{				/TintRamp [ TintRamp 0 NumTintComponents getinterval aload pop NumSamples NumTintComponents expandColor ] def			}if		end	} forall	AGMGrad_nColorsBd AGMGrad_gradType	]  AGMGrad_gradName exch /AGMGrad_gradNames xput	end}defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Gradient_Sep 1.0 0%%Version: 1.0 0%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)systemdict /setpacking known{	currentpacking	true setpacking} ifAdobe_AGM_Gradient begin/initializeSep{	/AGMGrad_ccAry1 5 array pt	/AGMGrad_whiteBytes 1 makeByte8 pt	/AGMGrad_name null pt	/AGMGrad_nColorSpace null pt		AGMCORE_composite_job{		initializeInRIPSeps	}{		initializeHostBasedSeps	}ifelse	initializeAllSeps	Adobe_AGM_Gradient{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/initializeAllSeps{	AGMGrad_PathsOnly not level2 not and{		/linealFill{			currentoverprint{				0 0 1 1 rectfill			}{				mySave					8 setImageParms					AGMGrad_colorRamp{						SpotColor{							TintRamp 0 currenttints 0 get makeByte8 put							currenttints length 2 eq{								TintRamp 1 currenttints 1 get makeByte8 put							}if						}if								currentcolor						4{							makeByte8 4 1 roll						}repeat												AGMGrad_SepColorImage					}{						currentcolor 1 exch sub 												makeByte8 												AGMGrad_SepImage					}ifelse				myRestore			}ifelse		}def	}if	 /AGMGrad_knockOut{		AGMGrad_PathsOnly level2 or{			gsave			1 setgray 			newpath			0 0 moveto 1 0 lineto 1 1 lineto 0 1 lineto closepath 			AGMGrad_&fill			grestore		}{			8 setImageParms AGMGrad_whiteBytes AGMGrad_&image		}ifelse	}def	/setCustomColor	{		1 index AGMGrad_black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll AGMGrad_ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setPreTintCustomColor	{		{			pop setcmykcolor		}{			setCustomColor		}ifelse	}def		/AGMGrad_CurrentInk{		true		AGMCORE_in_rip_sep{			currentcolorspace 0 get			dup /DeviceGray eq			1 index /DeviceCMYK eq or{				pop				currentgray 1 eq{					pop false				}if			}{				/Separation eq{					currentcolor 0 eq{						pop false					}if				}if			}ifelse		}{			currentgray 1 eq{				pop false			}if		}ifelse	}def	/currentInkN{			RenderCMYK{			AGMGrad_CurrentInk		}{			currentcolorspace 0 get /DeviceCMYK eq{				gsave				currentcolor currentcolorants 0 get currenttints 0 get SpotConverted 0 get setPreTintCustomColor				AGMGrad_CurrentInk				grestore				currenttints length 2 eq{					gsave					currentcolor currentcolorants 1 get currenttints 1 get SpotConverted 1 get setPreTintCustomColor					AGMGrad_CurrentInk					grestore					or				}if			}{				true				}ifelse		} ifelse	}def	/fillOvp{		currentoverprint{			AGMCORE_in_rip_sep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentgray 1 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		AGMGrad_&fill	}def	/fill{		RenderCMYK{			fillOvp		}{			currentcolorspace 0 get /DeviceGray eq{				0 0 0 currentgray 1 exch sub setcmykcolor			}if						currentcolorspace 0 get /DeviceCMYK eq{								gsave				currentcolor currentcolorants 0 get currenttints 0 get SpotConverted 0 get setPreTintCustomColor				fillOvp 				grestore				currenttints length 2 eq{					gsave					/AGMGrad_currentoverprint currentoverprint pt					true setoverprint					currentcolor currentcolorants 1 get currenttints 1 get SpotConverted 1 get setPreTintCustomColor					fillOvp					AGMGrad_currentoverprint setoverprint					grestore				}if			}{				gsave				[/Separation currentcolorants 0 get substituteBlack currentcolorspace [/pop cvx currentcolor] cvx ] setcolorspace				currenttints 0 get setcolor				fillOvp				grestore				currenttints length 2 eq{					gsave					/AGMGrad_currentoverprint currentoverprint pt					[/Separation currentcolorants 1 get substituteBlack currentcolorspace [/pop cvx currentcolor] cvx ] setcolorspace										true setoverprint					currenttints 1 get setcolor					fillOvp					AGMGrad_currentoverprint setoverprint					grestore				}if			}ifelse			newpath		}ifelse	}def		/rampImage{		currentoverprint{			rectImage		}{			AGMGrad_enabledSmoothShade{				fillRamp			}{				AGMGrad_nSamples setImageParms				Ramp aload pop				AGMGrad_colorRamp{					AGMGrad_SepColorImage				}{					AGMGrad_SepImage				}ifelse			}ifelse		}ifelse	}def}def/initializeInRIPSeps{	/AGMGrad_decodeNorm	[0 1] pt	/AGMGrad_SpotConverted	{		SpotColor{			Colorants exch get convert_spot_to_process		}{			pop false		}ifelse	}def	/AGMGrad_SepImage{			/DeviceGray setcolorspace			AGMGrad_decodeNorm dictImage	}def	/AGMGrad_SepColorImage{		RenderCMYK{			[ NumComponents 1 add 1 roll ] 			[ NumComponents { 0 1 } repeat ]			dictImage		}{			NumComponents npop			[/Separation Colorants 0 get substituteBlack /DeviceGray{}] setcolorspace			4 copy			TintRamp 0 get AGMGrad_decodeNorm dictImage			/AGMGrad_currentoverprint currentoverprint pt			true setoverprint			NumTintComponents 2 eq{				[/Separation Colorants 1 get substituteBlack /DeviceGray{}] setcolorspace				TintRamp 1 get  AGMGrad_decodeNorm dictImage			}{				4 npop			}ifelse			AGMGrad_currentoverprint setoverprint		}ifelse	}def		/getRampColorSpace{			SpotColor{								[					NumTintComponents 2 eq					{						/DeviceN 							[							Colorants 0 get							substituteBlack							Colorants 1 get							substituteBlack							] 					}{						/Separation						Colorants 0 get						substituteBlack					}ifelse					CSA map_csa 					[						/AGMGrad_range NumTintComponents 2 eq {1} {0} ifelse pt						/AGMGrad_tint_range_0 TintRange AGMGrad_range get 0 get pt						/AGMGrad_tint_range_1 TintRange AGMGrad_range get 1 get pt						AGMGrad_tint_range_0 AGMGrad_tint_range_1 2 copy gt{							/AGMGrad_tint_min xdf							/AGMGrad_tint_max xdf						}{							/AGMGrad_tint_max xdf							/AGMGrad_tint_min xdf						}ifelse						NumTintComponents 1 eq						{							Colorants 0 get get_csd_by_name	/ColorLookup get							/exch cvx 255 /mul cvx /cvi cvx /get cvx							/aload cvx /pop cvx						}{							/exch cvx  /pop	cvx								255 /mul cvx /cvi cvx							/AGMGrad_tint /xp cvx							/AGMGrad_TintRamp TintRamp 1 get def						 							0 1 NumComponents 1 sub{								Ramp exch get dup type /stringtype eq 									{									6 dict begin									/AGMGrad_Ramp xp									/AGMGrad_lookup 256 string def									/AGMGrad_min AGMGrad_TintRamp 0 get def									/AGMGrad_max AGMGrad_TintRamp dup length 1 sub get def									/AGMGrad_index 0 def									0 1 AGMGrad_min										{										AGMGrad_lookup exch AGMGrad_Ramp 0 get put										}for									AGMGrad_max 1 255										{										AGMGrad_lookup exch AGMGrad_Ramp dup length 1 sub get put										}for									AGMGrad_min 1 AGMGrad_max										{										/AGMGrad_count xp										AGMGrad_index 1 AGMGrad_TintRamp length 2 sub											{											AGMGrad_TintRamp exch get AGMGrad_count ge												{												exit												}if											/AGMGrad_index AGMGrad_index 1 add def											}for										AGMGrad_lookup AGMGrad_count										AGMGrad_Ramp AGMGrad_index get										put										}for																			AGMGrad_lookup /AGMGrad_tint cvx /get cvx 255 /div cvx									end									}{pop 0}ifelse							}for						}ifelse					] cvx				] setcolorspace				/AGMGrad_nColorSpace currentcolorspace pt			}if						AGMGrad_nSamples 1 gt{ 				firstRampColor			}if			SpotColor{				/AGMGrad_C0 [					currenttints 0 get					currenttints length 2 eq{						currenttints 1 get					}if				] pt				/AGMGrad_C0_Space AGMGrad_nColorSpace pt			}{				/AGMGrad_C0 [currentcolor] pt				/AGMGrad_C0_Space currentcolorspace pt			}ifelse			AGMGrad_nSamples 1 gt{ 				lastRampColor			}if			SpotColor{				/AGMGrad_C1 [					currenttints 0 get					currenttints length 2 eq{						currenttints 1 get					}if				] pt				/AGMGrad_C1_Space AGMGrad_nColorSpace pt			}{				/AGMGrad_C1 [currentcolor] pt				/AGMGrad_C1_Space currentcolorspace pt			}ifelse						/AGMGrad_rampColorSpace AGMGrad_C0_Space pt					}def}def/initializeHostBasedSeps{	/setcolor null pt	/currentcolor null pt	/setcolorspace null pt	/currentcolorspace null pt	/AGMGrad_currentcmyk 4 array pt	/AGMGrad_currentgray null pt	/AGMGrad_currentrgb 3 array pt			/setcolorspace	{		0 get /AGMGrad_currentcolorspace xp		AGMGrad_currentcolorspace /DeviceCMYK eq{			/setcolor 			{				4 copy AGMGrad_currentcmyk astore pop setcmykcolor			}bind pt			/currentcolor 			{				AGMGrad_currentcmyk aload pop			}bind pt		}{			AGMGrad_currentcolorspace /DeviceGray eq{				/setcolor				{					dup /AGMGrad_currentgray xp setgray				}bind pt				/currentcolor				{					AGMGrad_currentgray				}bind pt			}{				AGMGrad_currentcolorspace /DeviceRGB eq{					/setcolor					{						3 copy AGMGrad_currentrgb astore pop setrgbcolor					} bind pt					/currentcolor					{						AGMGrad_currentrgb aload pop					}bind pt				}if			}ifelse		}ifelse	}pt	/currentcolorspace	{		[ AGMGrad_currentcolorspace ]	}bind pt	/AGMGrad_invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/AGMGrad_ccThrough{		gsave		1 setCustomColor		currentgray 1 ne		grestore	}def	/AGMGrad_SpotConverted	{		AGMCORE_is_cmyk_sep SpotColor and{			Colorants exch get /AGMGrad_name xp			AGMGrad_name dup null ne exch AGMGrad_black ne and{				1 1 1 1 AGMGrad_name AGMGrad_ccThrough			}{				false			}ifelse		}{			pop false		}ifelse	}def	/AGMGrad_SpotChannel	{		AGMCORE_is_cmyk_sep SpotColor not and{			pop false		}{			Colorants exch get /AGMGrad_name xp			AGMGrad_name null eq{				false			}{				1 1 1 1 AGMGrad_name AGMGrad_ccThrough 			}ifelse		}ifelse	}def	/getChannelData	{		AGMCORE_is_cmyk_sep RenderCMYK and{			AGMCORE_black_plate{				4 1 roll 3 npop			}{				AGMCORE_yellow_plate{					4 2 roll 3 npop				}{					AGMCORE_magenta_plate{						4 3 roll 3 npop					}{						3 npop					}ifelse				}ifelse			}ifelse			/Invert /IsData		}{			4 npop			/NoInvert /NoData						SpotColor{				0 AGMGrad_SpotChannel{					pop pop					TintRamp 0 get /Invert /IsData 				}{					NumTintComponents 2 eq{						1 AGMGrad_SpotChannel{							pop pop							TintRamp 1 get /Invert /IsData 						}if					}if				}ifelse			}if		}ifelse	}def	/renderChannelData	{		gsave				/IsData eq{			/Invert eq{				AGMGrad_invertXfer			}if			systemdict/image get exec		}{			5 npop			AGMGrad_knockOut		}ifelse				grestore	}def	/AGMGrad_SepImage{		dup dup dup		getChannelData		exch pop /NoInvert exch		renderChannelData	}def	/AGMGrad_SepColorImage{				/AGMGrad_currentoverprint currentoverprint pt		SpotColor{			NumTintComponents 2 eq{				 1 AGMGrad_SpotChannel{					true setoverprint				}if			}if		}if		getChannelData 		renderChannelData			AGMGrad_currentoverprint setoverprint	}def	/getRampColorSpace{						AGMGrad_nSamples 1 gt{ 			firstRampColor		}if				/AGMGrad_C0_Space [/DeviceGray] pt		RenderCMYK{			/AGMGrad_C0 [currentgray] pt		}{			/AGMGrad_C0 [				0				0 AGMGrad_SpotChannel{					pop currenttints 0 get				}if				currenttints length 2 eq{					1 AGMGrad_SpotChannel{						pop currenttints 1 get					}if				}if				1 exch sub			] pt		}ifelse				AGMGrad_nSamples 1 gt{ 			lastRampColor		}if				/AGMGrad_C1_Space [/DeviceGray] pt		RenderCMYK{			/AGMGrad_C1 [currentgray] pt		}{			/AGMGrad_C1 [				0					0 AGMGrad_SpotChannel{						pop currenttints 0 get					}if					currenttints length 2 eq{						 1 AGMGrad_SpotChannel{							pop currenttints 1 get						}if					}if				1 exch sub			] pt		}ifelse				/AGMGrad_rampColorSpace AGMGrad_C0_Space pt	}def}defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 65 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if /AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				AGMIMG_&image			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					image				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{  	 						currentoverprint not{  			 					1 AGMCORE_&setgray  	 							knockout_image_samples  			 					currentdict imageormask_sys  			 				}{  			 					currentdict ignoreimagedata  			 				}ifelse				 		}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										currentdict consumeimagedata									}{										invert_image_samples						 				1 AGMCORE_&setgray										currentdict imageormask_sys									}ifelse								}{										currentdict ignoreimagedata								}ifelse							}{																	MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								image							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{							currentdict consumeimagedata  							currentoverprint not Name (All) eq or{								gsave 								knockout_unitsq								grestore		 					}if 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/imageormask_l2_overprint{		currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 									currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace								AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 								mark exch						dup	dup dup														AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse								AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse						imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				currentdict consumeimagedata		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			AGMIMG_&image		}ifelse				end end}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			/Decode [0 1 def]			currentdict		end	}if	dup begin		/NComponents 1 cdndf		/MultipleDataSources false cdndf		/SkipImageProc {false} cdndf		/HostSepColorImage false cdndf		/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse		] cdndf		/Operator /image cdndf	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/InksUsed [] def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse										Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 											AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 												currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{										MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop								Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 									{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{								MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResource%ADOBeginClientInjection: DocumentProlog End "AI10"%ADOEndClientInjection: DocumentProlog End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetup%ADOBeginClientInjection: DocumentSetup Start "AI10"%ADOEndClientInjection: DocumentSetup Start "AI10"Adobe_AGM_Utils begin2 2010 true Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Gradient/doc_setup get execAdobe_AGM_Image/doc_setup get exec%ADOBeginClientInjection: DocumentSetup End "AI10"%ADOEndClientInjection: DocumentSetup End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: j.15.eps 1%%EndPageComments%%BeginPageSetup%ADOBeginClientInjection: PageSetup Start "AI10"%ADOEndClientInjection: PageSetup Start "AI10"Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Gradient/page_setup get execAdobe_AGM_Image/page_setup get exec%ADOBeginClientInjection: PageSetup End "AI10"%ADOEndClientInjection: PageSetup End "AI10"%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -298.263 translate[1 0 0 1 0 0 ]  concatmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark800 path_rez% page clipgsavenewpathgsave % PSGState0 0 mo0 298.263 li331.832 298.263 li331.832 0 liclp[1 0 0 1 0 0 ] concat%ADOBeginClientInjection: BeginPageContent "AI10"%ADOEndClientInjection: BeginPageContent "AI10"false sop0 0 0 1 cmyk%ADOBeginSubsetFont: Helvetica Initial%!FontType115 dict begin/FontInfo 15 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/version (001.006) def/FullName (Helvetica) def/FamilyName (Helvetica) def/Weight (Medium) def/ItalicAngle 0 def/isFixedPitch false  def/UnderlinePosition -100 def/UnderlineThickness 50 defend def/FontName /Helvetica def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 0 /.notdef put def/PaintType 0 def/FontType 1 def/FontMatrix [0.001 0 0 0.001 0 0 ] def/FontBBox { -166 -225 1000 931 } def/StrokeWidth 0 defcurrentdict endcurrentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECB48FA43E44BE895991CB9C373C80EADFEAEF5EFA5F4286FAA013099BA2C44005FAC039F852BB4225633818093683A68F63554A937F8BA07DBFD09D8B45EBF1FC7D45C73953C4A942AC8EA07942969C3740F8FDDED3036CA23DA6FF540CC45E537C59B9AA6D45C578CA641FE62A8116AD9878FA6246AE4B043A31FF7F04E1808C8B7DE9818C0B46A24A3EA7E4479EAE242A5914A7B158790E7FB54257EB78FAA10F66F92CDABABC598B896060ECCDA4141E5D7F2780D0FC9C7AE6EDCFA4D4CB33471B0CE177F5F34390262090144A3542F0F99FD6A431CF58BFC177B69B948734361FFCA09219D86239F3D603158FD8D113E5F4328092B78C352E8F793767B178BFF1CC48776F16EA790F7143CADE2D7427D75F1528DC1A6D3925E146DAC6D9CE4162708BB768CD9C96558C5E5E305F97CA4A30DB8104FB7B8AFDB4B3BC3F4FC7560BE408747CA74201D38F5AD74E96F883F9E9CFEAB6B1240A2366FE9803F147CEE19B03DCED2E62CE2CE096D2F2828721B3CCA9F3D814A2212382CE23F516B9CDEFDF7BC8FAA73111ACE136FE7B9D486E6C96BCD0CF9C52A89D2FA2D30D14D0FCC9A2470B53D39938A43623BC02445D0EBB8D650771CFFE76FCA30682AF10E2DA6E4D634673A475ABF141802F37C3FB9875155262D4A28FD6B5F85EE4176592A8D3A421D4381BD4843BE10AD07C3DE85AA61F8E2EA95EBE86A6374184D582D35050900C96FED7F4E5A582DA69EDDC1DAAD28DE08D3CE98B8F6D3F7DDA609F4A3E9901B1146E22277CB7720A22CA09505B145546BAE68E2B972838048211660ED496AAF92B5C46A76FF7A74EBE5A27F7E523118173D167D9F5F68DACF119B296C0FBC5DD039404A4CC7CA837CDCE5FD15542E9DBABC7C1D42D0B9F00AE034DE2240DC724251C6B6817662E8E974BA4B60DE327E244E6EAA28AC475203416E87776838447CB3C4981B0C4BD30CCD4907B9A91D904C8D0B77F79A317C0D2BF21184030130DCC39455B80EAB8E1B323EBE123A7F0B05143B8EDB7A35D123B78719E50346CD44E7FC542E1FE89EAFCFB73C93A0165B0AE9FCC0D1860B0823E43C2DFEBE994C841084096602A02C9F4810B6C0F010A183A2D9FBF33FED88B4E1BA952C31AF88CCA6D5C81E9FE1E91A4E507E02EAFAEAC79709296F1BE5CCECF57C3861ECB1C9BBBDD913A9CC3064630A099B443C3722E4AAEC929409A788D9E73E5FFFA85D784F123A683BECCDAC02C2A75DE277A2B5C700A5A9444E07159EA4012DFB1E8C07B86D8DBC32FB590ED23D14823C9254C625110E3366BD1D4657B1720DB4702BF71C0E31E1A1A95AF701DB2D05404C0879EACF1A124C0FA3157CE4105B883F56A372E0967E781BEC6992B7AC5E7DB719FBD0FA14C1B54DF375AE6BD34D2D2E874D88A7C51C8C63E23C007A9470EEB98FCE948808A51459277592104DC1A0CA46C7F09BA2F1D7185F1EBC99D3B3AA0AA07740E86CE6ADA458136E8FFA2A72AAEAC2A222DEFF81E9BC8898A7AD0853A337401BB75E81320329D9CBF09B2FAD39CB40DEBEE1B78B2F108D421F22701B10477EE4EDE41F8E518DA687F01DDF48705D6051B969195463111749B5152FB2C2AB79AC00CBC80558DD0E9F4162174B2FAE7B2099243C82DC5167EF3FFEACCAA386892F325D28DDCF333BE00479D07A67E147A3CA4E4E12EFD1B8DC492881B1FF95A6B3F5E73743F7B29F28D127848A0C151158140A18A0BC5754091BCEAB5ADC60FE2EDCCF74F8245DCAC3E1E47F6BE3543FDB656CECEFF5B7070D8ECA7CE12D0A7FB122A9B55623A953C8DEBB9268539057C521A35D469148F7E7F66CF7F372FDC5608C8D4875DC7DB583A5DEA066AF20EB44ED6D46894D3CE6877DBF06C0398063AD21BB785CA829254E3209671C257A97E6AE22DE95AD7B1E1FC9EAA21197DC9339AE045FBB66FC1552F75550D653FAB561B3699BF552E671ACE58FD527862745CD363BD79166B694010E0F3C130FCFCC5183085E990E4D26A8BB0A7A56FD3A60FF7E34B65D7CF341F1BB93D3D16DEA00B5E668132A4B5F35EDF3AA31A84FA18C7A90D5726F5EE8FB006BAF1104B333F87C355277F72BF8C58AC5C434628EE4BABC2C496F482BC70B7463CE7C34B92FB877936C3A57D84A46B9B94BC5C1CCFC1876B142B03BBF41F4F8B3B75FB6D9B7CD0A58C02D38CD1FBD8831872A7562D934BC835435CAE7897DD51AA15C6510595B7138AE4159070A1F57AF6456EFDB24167589F63613CB472D80E54ACB8B867D89BBD78F39F77E99C6C24A0AB7D42E3E5952FB8B459E4159309314445A2C9C550C93EC6369501F0C99E79461258E22684D379882803492DAFC2C1B22D5BEC4E17D12CF4E73246417DD101B757897A1CE4E2A3CF921EBE47125B36A286196E072A66776D0FC6C833ACD17D58553CA52BD4E4C49D3878574E3ECEF1BBEEB9ADC4F96546168A78065C4E51CB2D4D117DBB7066BD7448ADACD43CCD12EFC956AA6CBA6248C5BDFB3A844B447A426153611F42C2BCCD4BC6607D669771D76F07F8427C97E861233DB4F233B9449E099D93F0E18AD840E1D3B4F016114C0D6570D8BFF245130E24550B1AC180857754A298E5385253FEAB548ED78C6987441565CAD1FEE71609779A57CD51F882CDFFEE86B9166C2FDF484B79E06478632730A70BEF8379DE7EDBA92891502E588C07E04882B677515B66149ED799714E160556C37795C769B2E5D63A928DB4C05115EA489302BC54B02780CF6D1D21510F31FF9CC76007FDB34699D1D67BA55204B1EC39BB970FAA13A816CFF486E8948539C9A1DFB5CBEC5172074DFD31017795BB0E988B6C47A9C3E048EEDD900C62A4EB5A951D377F77B15A2E43D67D6B7CB96E5DA78A10B59DC111EDAEF89268654B7C00D7F7060289AA11A0E89AED54D9291C835A8154C3BB001E57909F6CA646CE883FE293F68A5D3D483CBEEA2AEA6AF0AAFE6A4E3E14BA8BB5C507D219D48BABCEB1448137DA6790A505483D2AF4A62BF383D718DD32010611BB3192DABA22C35E6009E16059C4FBF43888D79C83787DB2C017772D35FF81FD1909ECE62ECEFB5CA85C60ECB1CB12A0ABFD74CF14BE6D292B93E7AEEB46F42ABCEC37A60792D28096A850198840DEBC679A8DB5B6769E21DBB636E786EB2F5C774D7D08A5E2E39065EDF08438703009900A7A3D470C200061D8E49C1177182D240DAFDE862D3E58A037E1A89916B201CF2E841BB208C4568FCF502FEBD46543FF4D22D01FB91CA6ECEF6569E22E58D2815E66D42DA5B7E7EDC0B4AF37515B2C703D79BD306E2D123263C37CB90A1E65D17C6E8E183592402D40DA6FEC4F1997C567DC2D600BC95D1151DDC884B64CF87463CF2C67ACF95973C9A01EAB2D61C249F0061584790BE01ED18C073296C270B8EEEA02D1BBB2723CCB90E0D1F05ED51575F90AC73F7B20661E0FBAB3599950BF9F896E5003901FFA4F509B2004AC4031755326560AD3F212A1AAF59C81CEE48045A33F2807DB30A62C3515225A87D33EA5FDF4088E3BD92F1F58C387253C7AE2DC00C0811894B1F7FC690D422354AD79872B9F84A51C515315BBBAD852AE0FE5ABD59A9878766ACF7CCBF35D187A56F179D83CBCF5C051C362E36CF3A4EA693D0BCBBF554A915181B08CF071C23739E596EDE0D1D89B32FF5AF3F0C4F4CE7C3E525BE9374F65E41417DA62BFD9DFCF105AAE319B8691AEC9F5CD9C0D39C06221825BBE0A0F9EE446DD83BE8087B766A2FB317325B8E6D8B786D95E117DF5A0C2C365E4915955C8BBC31998D7B21F9259FD07FC51EA216ED8B8A07419E0A54DDE30FD09E86C295B1F90E0861CEF9A4A5BDE73CB5F46FB2A13205BA969CF6079EEE537315734F531BF37A38E32631DB7158BE7AC92584C270080E14D884061698F3A58E9CC821144CED4B6DA35CE1B1DCB1EEA08EF3E760A3285375E67386F22AD2DDFE9B2EA6B55D5EAFA9B6BC5A63A398C972F2030DB57B68DD74AD62ED1487565203DE77B6B5D28268B004BAA2F6AF3A4BA52D892912D5256752C334FE838491561C041729AFFD530D3367FF2F740DA92E2A0F46CECA5773B5F8616CA3160C8FDC8D1D74A7A6939B68B740758B71879363411E1B1EEC23A3800C9B33F9293416062570458980A692F2C7D7C357133704431A6035CD32D9822CA533FEB26CBBECE58F776C5E80C8C0A7EC1D9910907494B6D8C6DB93339C48370C99BF4997CC82EC8768C45E2827A013594F82A8563E9164CADF7E92941CA4BC4F4F4500DB3D0A496D86B293E686F05060A7E2AD455067A9B258D55010FD3995FDDFDDDEAA8AF5264EAA3BC999EA8A3188B979A46CF4094CDD653C3081C492B48102F629FF5A5C0AD7A2DB5C8310FAE122488005A10606AE1D43D9828D95CD5ADE7FEFC31A9D2869DC238457EEBBA7199AE2C9F8FC1AD2EAEE0671E565E645FB5D207767AD47C4D44F74AB5522BB8B7F7A04E9BB87FA732AED558624FFAB3C8448E24055B65EB5A06896BCA9177FEF86EE415A43D60564B5BC1324DFBEA9F039B2DC7AAED79C1E2A8780618E7CE392B9AC5345CCB803CA90FB80F2069EDD56989305BBE4C6E21F07594157B76AB5350BC85CCDC3F3BA2522977FF9A6997D7AB67161F21C4EC100C16D32E95867DD5FFAF7764A13F095B0B6BA071C9A9D49271BEAA0FEFA1A8E290191924600F202628CA4720F3924C2DF354672473FBF46A3A7442447F6E1158E76916BC849F0480DEBFEA7737C6FD92C53E2CD381A2FAFE9E6AEFFF0499ED77753435A3934F6861841E399FF2A88D7BE4CF4695B0F82FCBA62DA2901FAFBED503B00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark/Helvetica findfont /Encoding getdup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 97 /a putdup 99 /c putdup 101 /e putdup 102 /f putdup 103 /g putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 113 /q putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 118 /v putdup 120 /x putpop%ADOEndSubsetFont/Helvetica*1 [32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 55{/.notdef}repeat /a /.notdef /c /.notdef /e /f /g /.notdef /i 2{/.notdef}repeat /l /m /n /o /p /q /r /s /t /u /v /.notdef /x 135{/.notdef}repeat] /Helvetica nfnt/Helvetica*1 findfont [9 0 0 -9 0 0 ]mfnt sfnt43.3078 279.571 mov(circular queue of pages) sh84.5816 296.237 mov(\(a\)) sh3.1266 101.522 mov-0.268082 0 101 (next) wsh0.000228882 111.522 mov(victim) sh117.372 59.7613 mo113.997 53.5928 li115.872 53.5928 li115.872 46.7613 li118.964 46.7613 li118.964 53.5928 li120.765 53.5928 li117.372 59.7613 li(29 ) 0 2 Adobe_AGM_Gradient/Gd get exec<</Start 0 /End 1 /Mid 0.5 /NumSamples 179 /CSA /1 /Interpolation false/NumComponents 4 /Ramp [0 0 0 <1A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCC>] /RenderCMYK null/SpotColor false>>GDAdobe_AGM_Gradient/Gb get execfalse 1 (29 ) 0 0 0 12.8206 [-5.60406e-07 12.8206 -10.7681 -4.70687e-07 122.765 47.1368 ] Gg[-32767 0 0 1 0 0 ] Gc[1 0 0 1 0 0 ] Gr[32767 0 0 1 1 0 ] GcGB0.5 lw0 lc0 lj3.8636 ml[] 0 dshtrue sadj117.372 59.7613 mo113.997 53.5928 li115.872 53.5928 li115.872 46.7613 li118.964 46.7613 li118.964 53.5928 li120.765 53.5928 li117.372 59.7613 licptrue sop0 0 0 1 cmyks117.372 92.7613 mo113.997 86.5928 li115.872 86.5928 li115.872 79.7613 li118.964 79.7613 li118.964 86.5928 li120.765 86.5928 li117.372 92.7613 lifalse sopAdobe_AGM_Gradient/Gb get execfalse 1 (29 ) 0 0 0 12.8206 [-5.60406e-07 12.8206 -10.7681 -4.70687e-07 122.765 80.1368 ] Gg[-32767 0 0 1 0 0 ] Gc[1 0 0 1 0 0 ] Gr[32767 0 0 1 1 0 ] GcGB117.372 92.7613 mo113.997 86.5928 li115.872 86.5928 li115.872 79.7613 li118.964 79.7613 li118.964 86.5928 li120.765 86.5928 li117.372 92.7613 licptrue sop0 0 0 1 cmyks117.372 125.762 mo113.997 119.593 li115.872 119.593 li115.872 112.762 li118.964 112.762 li118.964 119.593 li120.765 119.593 li117.372 125.762 lifalse sopAdobe_AGM_Gradient/Gb get execfalse 1 (29 ) 0 0 0 12.8206 [-5.60406e-07 12.8206 -10.7681 -4.70687e-07 122.765 113.137 ] Gg[-32767 0 0 1 0 0 ] Gc[1 0 0 1 0 0 ] Gr[32767 0 0 1 1 0 ] GcGB117.372 125.762 mo113.997 119.593 li115.872 119.593 li115.872 112.762 li118.964 112.762 li118.964 119.593 li120.765 119.593 li117.372 125.762 licptrue sop0 0 0 1 cmyks117.372 158.761 mo113.997 152.592 li115.872 152.592 li115.872 145.761 li118.964 145.761 li118.964 152.592 li120.765 152.592 li117.372 158.761 lifalse sopAdobe_AGM_Gradient/Gb get execfalse 1 (29 ) 0 0 0 12.8206 [-5.60406e-07 12.8206 -10.7681 -4.70687e-07 122.765 146.137 ] Gg[-32767 0 0 1 0 0 ] Gc[1 0 0 1 0 0 ] Gr[32767 0 0 1 1 0 ] GcGB117.372 158.761 mo113.997 152.592 li115.872 152.592 li115.872 145.761 li118.964 145.761 li118.964 152.592 li120.765 152.592 li117.372 158.761 licptrue sop0 0 0 1 cmyks117.372 230.761 mo113.997 224.592 li115.872 224.592 li115.872 217.761 li118.964 217.761 li118.964 224.592 li120.765 224.592 li117.372 230.761 lifalse sopAdobe_AGM_Gradient/Gb get execfalse 1 (29 ) 0 0 0 12.8206 [-5.60406e-07 12.8206 -10.7681 -4.70687e-07 122.765 218.137 ] Gg[-32767 0 0 1 0 0 ] Gc[1 0 0 1 0 0 ] Gr[32767 0 0 1 1 0 ] GcGB117.372 230.761 mo113.997 224.592 li115.872 224.592 li115.872 217.761 li118.964 217.761 li118.964 224.592 li120.765 224.592 li117.372 230.761 licptrue sop0 0 0 1 cmyks107.331 26.7613 mo127.331 26.7613 li127.331 46.7613 li107.331 46.7613 li107.331 26.7613 lifalse sop0 0 0 0.2 cmykf107.331 26.7613 mo127.331 26.7613 li127.331 46.7613 li107.331 46.7613 li107.331 26.7613 licptrue sop0 0 0 1 cmyks59.8306 29.7613 mo73.8306 29.7613 li73.8306 43.7613 li59.8306 43.7613 li59.8306 29.7613 lifalse sop0.2 0 0 0 cmykf59.8306 29.7613 mo73.8306 29.7613 li73.8306 43.7613 li59.8306 43.7613 li59.8306 29.7613 licptrue sop0 0 0 1 cmyks107.331 59.7613 mo127.331 59.7613 li127.331 79.7613 li107.331 79.7613 li107.331 59.7613 lifalse sop0 0 0 0.2 cmykf107.331 59.7613 mo127.331 59.7613 li127.331 79.7613 li107.331 79.7613 li107.331 59.7613 licptrue sop0 0 0 1 cmyks107.331 92.7613 mo127.331 92.7613 li127.331 112.762 li107.331 112.762 li107.331 92.7613 lifalse sop0 0 0 0.2 cmykf107.331 92.7613 mo127.331 92.7613 li127.331 112.762 li107.331 112.762 li107.331 92.7613 licptrue sop0 0 0 1 cmyks59.8306 95.7613 mo73.8306 95.7613 li73.8306 109.762 li59.8306 109.762 li59.8306 95.7613 lifalse sop0.2 0 0 0 cmykf59.8306 95.7613 mo73.8306 95.7613 li73.8306 109.762 li59.8306 109.762 li59.8306 95.7613 licptrue sop0 0 0 1 cmyks107.331 125.762 mo127.331 125.762 li127.331 145.762 li107.331 145.762 li107.331 125.762 lifalse sop0 0 0 0.2 cmykf107.331 125.762 mo127.331 125.762 li127.331 145.762 li107.331 145.762 li107.331 125.762 licptrue sop0 0 0 1 cmyks59.8306 128.762 mo73.8306 128.762 li73.8306 142.762 li59.8306 142.762 li59.8306 128.762 lifalse sop0.2 0 0 0 cmykf59.8306 128.762 mo73.8306 128.762 li73.8306 142.762 li59.8306 142.762 li59.8306 128.762 licptrue sop0 0 0 1 cmyks107.331 158.761 mo127.331 158.761 li127.331 178.761 li107.331 178.761 li107.331 158.761 lifalse sop0 0 0 0.2 cmykf107.331 158.761 mo127.331 158.761 li127.331 178.761 li107.331 178.761 li107.331 158.761 licptrue sop0 0 0 1 cmyks59.8306 161.761 mo73.8306 161.761 li73.8306 175.761 li59.8306 175.761 li59.8306 161.761 lifalse sop0.2 0 0 0 cmykf59.8306 161.761 mo73.8306 161.761 li73.8306 175.761 li59.8306 175.761 li59.8306 161.761 licptrue sop0 0 0 1 cmyks107.331 197.761 mo127.331 197.761 li127.331 217.761 li107.331 217.761 li107.331 197.761 lifalse sop0 0 0 0.2 cmykf107.331 197.761 mo127.331 197.761 li127.331 217.761 li107.331 217.761 li107.331 197.761 licptrue sop0 0 0 1 cmyks59.8306 200.761 mo73.8306 200.761 li73.8306 214.761 li59.8306 214.761 li59.8306 200.761 lifalse sop0.2 0 0 0 cmykf59.8306 200.761 mo73.8306 200.761 li73.8306 214.761 li59.8306 214.761 li59.8306 200.761 licptrue sop0 0 0 1 cmyks107.331 230.761 mo127.331 230.761 li127.331 250.761 li107.331 250.761 li107.331 230.761 lifalse sop0 0 0 0.2 cmykf107.331 230.761 mo127.331 230.761 li127.331 250.761 li107.331 250.761 li107.331 230.761 licptrue sop0 0 0 1 cmyks59.4986 103.36 mo50.2457 108.422 li50.2457 105.61 li31.8306 105.61 li31.8306 100.971 li50.2457 100.971 li50.2457 98.2686 li59.4986 103.36 lifalse sopAdobe_AGM_Gradient/Gb get execfalse 1 (29 ) 0 0 0 27.9862 [27.9862 0 0 14.1534 31.8775 96.2686 ] Gg[-32767 0 0 1 0 0 ] Gc[1 0 0 1 0 0 ] Gr[32767 0 0 1 1 0 ] GcGB59.4986 103.36 mo50.2457 108.422 li50.2457 105.61 li31.8306 105.61 li31.8306 100.971 li50.2457 100.971 li50.2457 98.2686 li59.4986 103.36 licptrue sop0 0 0 1 cmyks1 lw117.331 250.761 mo117.331 259.322 124.271 266.761 132.831 266.761 cv141.392 266.761 148.331 259.822 148.331 251.261 cv148.331 27.5113 li148.331 18.9502 141.392 11.7613 132.831 11.7613 cv125.928 11.7613 120.337 15.5245 118.331 21.7613 cv117.623 24.2085 li0 0 0 1 cmyksfalse sop0 0 0 1 cmyk%ADOBeginSubsetFont: Helvetica AddGlyphscurrentfile eexec A0B00ED553D3BE1A49B421B2026F25240CD11E93D48BDF40C9C1B151C4CB94B86FDDAE9D03CE1AF4A1840CAA745A710E2F0824555DF1F4866215382664BA85230990A4917B54B7896634680640ED72AE645C23EA3634B6A9D070E33A3B4FBB2C3E50CC7F5FAB44A33292150774FD31F12D78CBB4B3B813A6498AF739F031D56393E8A553061CAB48E4986EA9C8616B3D3882FEFED3F49DE53958D5E76E44893C9C0329CFFF80059E619EB27A76A06A18E69D8E64E70F7BD568A6F8198A85872BECCFE9124E9DDD4191AEE0734FD1C37E5D79F330CBE51E3BC9CDDF4B9617796E2F41E11B25E3BEF72AB5456E03C97BDFE2EDF8FFA690450947F8B505F5BF8283A053D14C3AEDA400D5A279C0C77F9D879E3C74BB423DE12AEA36AF47CB5DAD88C2AC5BEF9C73A9E6CAE030086FDBBB4A9092D752EB1BD15DAC3E786A967CB838DF9630EEAA9C5418CBDD53C557E168C48A9C8A4569ADDAD3AD8CA62F1A23B3174E7B22ED6C4F41A6504F834A856901D35AC27961AE8371403ADD941BDD4A02FFAD342A2EF8455602216D92DC2356EBD59C0902D12842EBBDB8CB699DF21EC124928C1BAA7BE097307724B7F2D34E87728B726D9AF9AF13384BB72F128D32A009A6D590CA8624BA7C3C80DD2B03E4A66FA14ACDD6FE923EB56B7406D50DAEA5C455A7B3F63F039D76ED554C66020FC7CFA42E7AA0D9045B3004A5C4C03EA994A54A6BC83578AB2A68DFEE7F56E924F70E9791E4A47F17539C22E7983FE0AE208AD69965C4696C573D6D8B96F76D3ECDA9FF3DE8F8C79BC706F18FCA3F545B94F13D1ECE00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark/Helvetica findfont /Encoding getdup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 48 /zero putdup 97 /a putdup 98 /b putdup 99 /c putdup 101 /e putdup 102 /f putdup 103 /g putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 113 /q putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 118 /v putdup 120 /x putpop%ADOEndSubsetFont/Helvetica*1 [32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 6{/.notdef}repeat /zero 48{/.notdef}repeat /a /b /c /.notdef /e /f /g /.notdef /i 2{/.notdef}repeat /l /m /n /o /p /q /r /s /t /u /v /.notdef /x 135{/.notdef}repeat] /Helvetica nfnt/Helvetica*1 findfont [9 0 0 -9 0 0 ]mfnt sfnt64.3286 39.9385 mov(0) sh47.9567 8.58105 mov-0.268066 0 102 (reference) wsh59.8286 18.5811 mov(bits) sh98.2708 8.37891 mov(pages) sh59.8306 62.7618 mo73.8306 62.7618 li73.8306 76.7618 li59.8306 76.7618 li59.8306 62.7618 li0.2 0 0 0 cmykf0.5 lw59.8306 62.7618 mo73.8306 62.7618 li73.8306 76.7618 li59.8306 76.7618 li59.8306 62.7618 licptrue sop0 0 0 1 cmyksfalse sop0 0 0 1 cmyk%ADOBeginSubsetFont: Helvetica AddGlyphscurrentfile eexec A0B00ED553D3BE1A49B421B2026F25240CD11E93D48BDF40C9C1B151C4CB94B86FDDAE9D03CE1AF4A1840CAA745A710E2F0824555DF1F4866215382664BA85230990A4917B54B7896634680640ED72AE645C23EA3634B6A9D070E33A3B4FBB2C3E50CC7F5FAB44A33292150774FD31F12D78CBB4B3B813A6498AF739F031D56393E8A553061CAB48E4986EA9C8616B3D3882FEFED3F49DE53958D5E76E44893C9C0329CFFF80059E619EB27A76A06A18E69D8E64E70F7BD57DDCDAF2F2AEA332A32A216129DB2FBFDE0C196E8E7160B56D65B09123DE85AA2FC5D03A2869E6EFAB6D5DD761EEA39337D517A0575B76C4722F41889F8CC436C23F4C6A2A5569A79D0AC74B5AA321B4098B581305CB92901CCA87CC4A3905EB8D5299730A6FADE5F35CECF2B5E84DA8615AB790EEBB4EE96F5D1034A3A59733CEF56D8F7FD878ABB5FE3CB800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark/Helvetica findfont /Encoding getdup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 48 /zero putdup 49 /one putdup 97 /a putdup 98 /b putdup 99 /c putdup 101 /e putdup 102 /f putdup 103 /g putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 113 /q putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 118 /v putdup 120 /x putpop%ADOEndSubsetFont/Helvetica*1 [32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 6{/.notdef}repeat /zero /one 47{/.notdef}repeat /a /b /c /.notdef /e /f /g /.notdef /i 2{/.notdef}repeat /l /m /n /o /p /q /r /s /t /u /v /.notdef /x 135{/.notdef}repeat] /Helvetica nfnt/Helvetica*1 findfont [9 0 0 -9 0 0 ]mfnt sfnt64.3286 72.9385 mov(0) sh64.3286 105.938 mov(1) sh64.3286 138.938 mov(1) sh64.3286 171.938 mov(0) sh64.3286 210.938 mov(1) sh59.8306 233.761 mo73.8306 233.761 li73.8306 247.761 li59.8306 247.761 li59.8306 233.761 li0.2 0 0 0 cmykf59.8306 233.761 mo73.8306 233.761 li73.8306 247.761 li59.8306 247.761 li59.8306 233.761 licptrue sop0 0 0 1 cmyksfalse sop0 0 0 1 cmyk%ADOBeginSubsetFont: Helvetica AddGlyphscurrentfile eexec A0B00ED553D3BE1A49B421B2026F25240CD11E93D48BDF40C9C1B151C4CB94B86FDDAE9D03CE1AF4A1840CAA745A710E2F0824555DF1F4866215382664BA85230990A4917B54B7896634680640ED72AE645C23EA3634B6A9D070E33A3B4FBB2C3E50CC7F5FAB44A33292150774FD31F12D78CBB4B3B813A6498AF739F031D56393E8A553061CAB48E4986EA9C8616B3D3882FEFED3F49DE53958D5E76E44893C9C0329CFFF80059E619EB27A76A06A18E69D8E64E70F7BD577B727D60B836C0E8CD9120CC04BB6DBA126FF61A5C5EEB2C6D9C607361EEA5DB7C6DB132004829C27B4B21E7A0CD6750692EDA50630B5B2E02D7487430A842AB37CE1D583C385CFD24BFAB927B9B2DA56152F82A46F222FC6EFB031730D07E8AB290FABE2C39BD336CBF4CEECB994D9EBE0CBBD1881A6F4CB28EDD057235DEDCDAE81BF792C6BE1CFDC07749909D0795F86F6DA4D983D69B00D1D47D48DA03000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark/Helvetica findfont /Encoding getdup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 48 /zero putdup 49 /one putdup 97 /a putdup 98 /b putdup 99 /c putdup 101 /e putdup 102 /f putdup 103 /g putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 113 /q putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 118 /v putdup 120 /x putdup 188 /ellipsis putpop%ADOEndSubsetFont/Helvetica*1 [32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 6{/.notdef}repeat /zero /one 47{/.notdef}repeat /a /b /c /.notdef /e /f /g /.notdef /i 2{/.notdef}repeat /l /m /n /o /p /q /r /s /t /u /v /.notdef /x 67{/.notdef}repeat /ellipsis 67{/.notdef}repeat] /Helvetica nfnt/Helvetica*1 findfont [9 0 0 -9 0 0 ]mfnt sfnt64.3286 243.938 mov(1) sh/Helvetica*1 findfont [0 -15 -15 0 0 0 ]mfnt sfnt118.229 195.761 mov(\274) sh67.9316 195.761 mov(\274) sh/Helvetica*1 findfont [9 0 0 -9 0 0 ]mfnt sfnt226.308 279.571 mov(circular queue of pages) sh267.582 296.237 mov(\(b\)) sh300.373 59.7613 mo296.998 53.5928 li298.873 53.5928 li298.873 46.7613 li301.964 46.7613 li301.964 53.5928 li303.765 53.5928 li300.373 59.7613 liAdobe_AGM_Gradient/Gb get execfalse 1 (29 ) 0 0 0 12.8206 [-5.60406e-07 12.8206 -10.7676 -4.70666e-07 305.765 47.1368 ] Gg[-32767 0 0 1 0 0 ] Gc[1 0 0 1 0 0 ] Gr[32767 0 0 1 1 0 ] GcGB300.373 59.7613 mo296.998 53.5928 li298.873 53.5928 li298.873 46.7613 li301.964 46.7613 li301.964 53.5928 li303.765 53.5928 li300.373 59.7613 licptrue sop0 0 0 1 cmyks300.373 92.7613 mo296.998 86.5928 li298.873 86.5928 li298.873 79.7613 li301.964 79.7613 li301.964 86.5928 li303.765 86.5928 li300.373 92.7613 lifalse sopAdobe_AGM_Gradient/Gb get execfalse 1 (29 ) 0 0 0 12.8206 [-5.60406e-07 12.8206 -10.7676 -4.70666e-07 305.765 80.1368 ] Gg[-32767 0 0 1 0 0 ] Gc[1 0 0 1 0 0 ] Gr[32767 0 0 1 1 0 ] GcGB300.373 92.7613 mo296.998 86.5928 li298.873 86.5928 li298.873 79.7613 li301.964 79.7613 li301.964 86.5928 li303.765 86.5928 li300.373 92.7613 licptrue sop0 0 0 1 cmyks300.373 125.762 mo296.998 119.593 li298.873 119.593 li298.873 112.762 li301.964 112.762 li301.964 119.593 li303.765 119.593 li300.373 125.762 lifalse sopAdobe_AGM_Gradient/Gb get execfalse 1 (29 ) 0 0 0 12.8206 [-5.60406e-07 12.8206 -10.7676 -4.70666e-07 305.765 113.137 ] Gg[-32767 0 0 1 0 0 ] Gc[1 0 0 1 0 0 ] Gr[32767 0 0 1 1 0 ] GcGB300.373 125.762 mo296.998 119.593 li298.873 119.593 li298.873 112.762 li301.964 112.762 li301.964 119.593 li303.765 119.593 li300.373 125.762 licptrue sop0 0 0 1 cmyks300.373 158.761 mo296.998 152.592 li298.873 152.592 li298.873 145.761 li301.964 145.761 li301.964 152.592 li303.765 152.592 li300.373 158.761 lifalse sopAdobe_AGM_Gradient/Gb get execfalse 1 (29 ) 0 0 0 12.8206 [-5.60406e-07 12.8206 -10.7676 -4.70666e-07 305.765 146.137 ] Gg[-32767 0 0 1 0 0 ] Gc[1 0 0 1 0 0 ] Gr[32767 0 0 1 1 0 ] GcGB300.373 158.761 mo296.998 152.592 li298.873 152.592 li298.873 145.761 li301.964 145.761 li301.964 152.592 li303.765 152.592 li300.373 158.761 licptrue sop0 0 0 1 cmyks300.373 230.761 mo296.998 224.592 li298.873 224.592 li298.873 217.761 li301.964 217.761 li301.964 224.592 li303.765 224.592 li300.373 230.761 lifalse sopAdobe_AGM_Gradient/Gb get execfalse 1 (29 ) 0 0 0 12.8206 [-5.60406e-07 12.8206 -10.7676 -4.70666e-07 305.765 218.137 ] Gg[-32767 0 0 1 0 0 ] Gc[1 0 0 1 0 0 ] Gr[32767 0 0 1 1 0 ] GcGB300.373 230.761 mo296.998 224.592 li298.873 224.592 li298.873 217.761 li301.964 217.761 li301.964 224.592 li303.765 224.592 li300.373 230.761 licptrue sop0 0 0 1 cmyks290.332 26.7613 mo310.332 26.7613 li310.332 46.7613 li290.332 46.7613 li290.332 26.7613 lifalse sop0 0 0 0.2 cmykf290.332 26.7613 mo310.332 26.7613 li310.332 46.7613 li290.332 46.7613 li290.332 26.7613 licptrue sop0 0 0 1 cmyks242.832 29.7613 mo256.832 29.7613 li256.832 43.7613 li242.832 43.7613 li242.832 29.7613 lifalse sop0.2 0 0 0 cmykf242.832 29.7613 mo256.832 29.7613 li256.832 43.7613 li242.832 43.7613 li242.832 29.7613 licptrue sop0 0 0 1 cmyks290.332 59.7613 mo310.332 59.7613 li310.332 79.7613 li290.332 79.7613 li290.332 59.7613 lifalse sop0 0 0 0.2 cmykf290.332 59.7613 mo310.332 59.7613 li310.332 79.7613 li290.332 79.7613 li290.332 59.7613 licptrue sop0 0 0 1 cmyks290.332 92.7613 mo310.332 92.7613 li310.332 112.762 li290.332 112.762 li290.332 92.7613 lifalse sop0 0 0 0.2 cmykf290.332 92.7613 mo310.332 92.7613 li310.332 112.762 li290.332 112.762 li290.332 92.7613 licptrue sop0 0 0 1 cmyks242.832 95.7613 mo256.832 95.7613 li256.832 109.762 li242.832 109.762 li242.832 95.7613 lifalse sop0.2 0 0 0 cmykf242.832 95.7613 mo256.832 95.7613 li256.832 109.762 li242.832 109.762 li242.832 95.7613 licptrue sop0 0 0 1 cmyks290.332 125.762 mo310.332 125.762 li310.332 145.762 li290.332 145.762 li290.332 125.762 lifalse sop0 0 0 0.2 cmykf290.332 125.762 mo310.332 125.762 li310.332 145.762 li290.332 145.762 li290.332 125.762 licptrue sop0 0 0 1 cmyks242.832 128.762 mo256.832 128.762 li256.832 142.762 li242.832 142.762 li242.832 128.762 lifalse sop0.2 0 0 0 cmykf242.832 128.762 mo256.832 128.762 li256.832 142.762 li242.832 142.762 li242.832 128.762 licptrue sop0 0 0 1 cmyks290.332 158.761 mo310.332 158.761 li310.332 178.761 li290.332 178.761 li290.332 158.761 lifalse sop0 0 0 0.2 cmykf290.332 158.761 mo310.332 158.761 li310.332 178.761 li290.332 178.761 li290.332 158.761 licptrue sop0 0 0 1 cmyks242.832 161.761 mo256.832 161.761 li256.832 175.761 li242.832 175.761 li242.832 161.761 lifalse sop0.2 0 0 0 cmykf242.832 161.761 mo256.832 161.761 li256.832 175.761 li242.832 175.761 li242.832 161.761 licptrue sop0 0 0 1 cmyks290.332 197.761 mo310.332 197.761 li310.332 217.761 li290.332 217.761 li290.332 197.761 lifalse sop0 0 0 0.2 cmykf290.332 197.761 mo310.332 197.761 li310.332 217.761 li290.332 217.761 li290.332 197.761 licptrue sop0 0 0 1 cmyks242.832 200.761 mo256.832 200.761 li256.832 214.761 li242.832 214.761 li242.832 200.761 lifalse sop0.2 0 0 0 cmykf242.832 200.761 mo256.832 200.761 li256.832 214.761 li242.832 214.761 li242.832 200.761 licptrue sop0 0 0 1 cmyks290.332 230.761 mo310.332 230.761 li310.332 250.761 li290.332 250.761 li290.332 230.761 lifalse sop0 0 0 0.2 cmykf290.332 230.761 mo310.332 230.761 li310.332 250.761 li290.332 250.761 li290.332 230.761 licptrue sop0 0 0 1 cmyks242.5 168.776 mo233.247 173.838 li233.247 171.026 li214.832 171.026 li214.832 166.386 li233.247 166.386 li233.247 163.684 li242.5 168.776 lifalse sopAdobe_AGM_Gradient/Gb get execfalse 1 (29 ) 0 0 0 27.9862 [27.9862 0 0 14.1543 214.878 161.684 ] Gg[-32767 0 0 1 0 0 ] Gc[1 0 0 1 0 0 ] Gr[32767 0 0 1 1 0 ] GcGB242.5 168.776 mo233.247 173.838 li233.247 171.026 li214.832 171.026 li214.832 166.386 li233.247 166.386 li233.247 163.684 li242.5 168.776 licptrue sop0 0 0 1 cmyks1 lw300.332 250.761 mo300.332 259.322 307.271 266.761 315.832 266.761 cv324.392 266.761 331.332 259.822 331.332 251.261 cv331.332 27.5113 li331.332 18.9502 324.392 11.7613 315.832 11.7613 cv308.928 11.7613 303.337 15.5245 301.332 21.7613 cv300.683 24.2618 li0 0 0 1 cmyksfalse sop0 0 0 1 cmyk/Helvetica*1 findfont [9 0 0 -9 0 0 ]mfnt sfnt247.329 39.9385 mov(0) sh230.957 8.58105 mov-0.268066 0 102 (reference) wsh242.829 18.5811 mov(bits) sh281.271 8.37891 mov(pages) sh242.832 62.7618 mo256.832 62.7618 li256.832 76.7618 li242.832 76.7618 li242.832 62.7618 li0.2 0 0 0 cmykf0.5 lw242.832 62.7618 mo256.832 62.7618 li256.832 76.7618 li242.832 76.7618 li242.832 62.7618 licptrue sop0 0 0 1 cmyksfalse sop0 0 0 1 cmyk/Helvetica*1 findfont [9 0 0 -9 0 0 ]mfnt sfnt247.329 72.9385 mov(0) sh247.329 105.938 mov(0) sh247.329 138.938 mov(0) sh247.329 171.938 mov(0) sh247.329 210.938 mov(1) sh242.832 233.761 mo256.832 233.761 li256.832 247.761 li242.832 247.761 li242.832 233.761 li0.2 0 0 0 cmykf242.832 233.761 mo256.832 233.761 li256.832 247.761 li242.832 247.761 li242.832 233.761 licptrue sop0 0 0 1 cmyksfalse sop0 0 0 1 cmyk/Helvetica*1 findfont [9 0 0 -9 0 0 ]mfnt sfnt247.329 243.938 mov(1) sh/Helvetica*1 findfont [0 -15 -15 0 0 0 ]mfnt sfnt301.229 195.761 mov(\274) sh250.933 195.761 mov(\274) sh120.037 22.8174 mo117.954 23.1182 li116.291 21.8287 li116.994 26.7613 li120.037 22.8174 li0 0 0 1 cmykf303.062 22.8174 mo300.979 23.1182 li299.316 21.8287 li300.019 26.7613 li303.062 22.8174 li0 0 0 1 cmykf%ADOBeginClientInjection: EndPageContent "AI10"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI10"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer%ADOBeginClientInjection: PageTrailer Start "AI10"%ADOEndClientInjection: PageTrailer Start "AI10"Adobe_AGM_Gradient/page_trailer get execAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%ADOBeginClientInjection: PageTrailer End "AI10"%ADOEndClientInjection: PageTrailer End "AI10"%%Trailer%ADOBeginClientInjection: DocumentTrailer Start "AI10"%ADOEndClientInjection: DocumentTrailer Start "AI10"Adobe_AGM_Gradient/doc_trailer get execAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%ADOBeginClientInjection: DocumentTrailer End "AI10"%ADOEndClientInjection: DocumentTrailer End "AI10"%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 10.0%%For: (manoj) (TECHBOOKS)%%Title: (j.15.eps)%%CreationDate: 7/1/04 13:03%AI9_DataStream%GatkKla#BgFf'Efh`^?%;%[u1<R+8\1QhN8-[%#;ALf%<-RLl8*!m`21!CiB8X?IsL[TY_#M:+W=[cB5mU8\6PMZD^_`GI!b-`!K%qs;L-hnRs=^\m,YYQ"IcLR@BpRc]C9Knhe8\'I88YKq\_hYd.)T?ktkr8?a2%cq,*g?5Hr_H3V\A"4m[p[tTSqesNu\%d:gC)_*J%I.cdDX4M9=rUA>JrT1q`0DbCgmsX?OX-[aMn%Xl!s"`Fphth\<rSdYB^3fBtlp(Hi(Ve)lo^)C3na+flDu8:Enp0`4l(?6_rSsCH%a2-U0]._ccqTZL^nqZc//^rWEI/(%OIf'0C?geMdWBL7T=9%=Tj,_OD]RAVn5(E7rJ,V;Iro,lu](@)aGPuiYX'K*./)G[KH5un\%(N6L(5!47N^V9[4#HmQG55bA'^@::_;L&QG])I3XpNZ;kh$`uWIMMh=e&Qq8rq1#PQlbD]2S].FfA7]WT.Jr0cFfVf^\Q@I?e><.%#O)<h_t`r;(]E_\2gYnnoDC;Mm*DTE5CSdW^I2Q%J%;tB\ialJe,GDXGs;6#f+5X`g[gbM?bQ9a[>_kI^0Q*\`Tt!_GlI`K=XBr#%g=#ZZn%X?,?N9'/kAGV<V07:S\$,Mqin"_*h05L)k^P]roP&4+cg(]5csQfm]L@EZ^%gHls7O8B*oHh+n%\g>rJ0q>kluY;h0A`+%YQ"DZg0_hoGpt%(e@@b2VB&T<*a5'Ud^=-erVP@CGYp-Q"n#HpCrl&V]YAspr/]02rq]lt;jaG3qHa,=]`.l^hZ!@Q]ZdsXlh@HI%*oHuL6bgA+X2k7\FG]R<H2W,?P2r&QQKuROn'@?prnm/D^F%$*]mVtK5#/Wedm*cpqet)QrAb6('Al;.([h8KZN'L]rjK.:,q"rF%cOXC^n92ITI2;T6:&Z]_T<7q\X0:rp:6WGja`jZ)GGj\OpXq@;I=8.15K31/J,6-Br)>,kT&$U'R\+<=cSYXrmFM27COXF@q9r,f%op)0Gl79XFeQ9KVeQ74^fe_N6p8etCrTos@5C7R%k8NkJhJ57**Ns\ck5B_QR6UY7F7Q6$E_c@s?LKm!J,1$qjA4re?]"*\cH2^X%b8L-).p_I_?.g+kds:iF=.PQL]N4X8^RoOQrq&"mT)%)gIiS9l`n)\HX5qUmS(Glfd9gCu`cg1oOl,osre]s%T5oD[oLd^F?F.B&%]6;EUI`hKBGPG@,latHgTDm$e?2O*:CZN4h:I!t=r-@\h,ph0S?MF2SG8YA\GPSf<fepKZec""*DYJ:aAq#`rO^I.[mX&78^0fJ>%mXP.nZb&l-Zh)r'XKQi=T0N;(-/[#:>*J9arq&"lme5=>ZL>AGXk\&S9=jRII$^,1ZoR\M;D)+^lc"9JYB@TLGHL^aheV$fq0bd$%F1]H[Vs\cDY'tg!HN3h_NVq5K9:E%I^XhPY_R&j[-,370IXUDQfj.gS2!_kN:U5IApKd3ZjNha/aj=>BT6C%Eb"qomM!ceX\"?^]%51]UUn+XMuH[R]iE;oD%AJO7cT9QL&Spk$rk5"lJe*lVKmB`=d=.XkJIql[rrUg!`ZRj_CQfW\bjmgY5?X3%^rP&8Yq;q;<Vr-*u%gLjlCID,4Dqtfp/2qPg:IU@TA]0DWFGOPHTmHaH6qnK;kbV.4Jc2$&E0gC"c^OGnL>l=Q>o'G[VIeG=j0:&,+X^B\`YJ9u3rdT+R%lbN6mc0>1N;YBpdq0fFab4Vd,\urkbZhs%FIHUR017#,hYroY$HGB@Mb4YLA?Saq7luha">pFa.YM\rC^7M?s]RSqPp\X!a`p@iG%i4#o?\NW0kpWEHkkut3%?S$ZC[C`We27p5#X*D@*Y3=@$DP+m$mrQ*AK[7U&$GITo5QA6J`RTBTAR':?H+b0ZlT2]8Y0Yqul+5m7%Cod#1f5eWuehEtBB'1PEfr&cdgUTQ9qUY<#p"Ounm;l665JHj14'?:lOndXUV6A_pBCkT$cb/]=anrQn:U]R=pTaVm543J^o)7=W%IZ=>HN/sTeoig<c^AcG?QNV^WQKq/pIWI0D`Via7s*XRa;i[0AC\mq@ju6Y;CBtu.G(0"2eb\8']dhW[G-1c\gu5j0obkLBPL2#S%(G.SKrTn$hI=J?M\,GqF9g:GfY8s`HIN%OOTcY.(T6`HMo=ZeA2D`,H\.4EInB7T?J'P<jp\s5eo>LKTo55(fZEfg>\?G;[IeieX%4uM'+,^DUUmHK'urn&Vs]Cbhhm_3pA>#*0iQSprth>;5\^:L-.Bfo>+f)0p_MoWGWF]j^qRu\1H/_>+ekMDf5kF+Wha2dXUT7,.i%q_^$T%:;;*n^6KiC]9o33U8&0]!'*KmuQhVmB`GBPFp`pa*H9t9)FdLGI$p>q8&q'kC0dLISYiN6/);%kO8\jTUU3fFnnP=H$tus%s*1p8k=9lcG/qb<^\L=S`0)gLB0WdKpJq*0[-)r+j.h$PXHurb[,$'IXl')^eN9Vh,?gd7^43&mr`idir[L#'#n?[7r'0&s4]tc_%hq*ZWp)gL<T&`-3Zd@R\Vn4=&Vbp5lj#uYAFSG?tO(2;[<cKU5YB0Nt&%1KhM#;^FmB\m%m`!eMP4M3.?1+?aPlBI#a/.7GA,c&3%g\L#sr(l&#&,k-pBs1<^9)>.80u7EAmeFY;gfNZ9g6X0MH/F7%9M>A*%s#G-ksHP0/[&aRpl5%HbBup"O'_<g[-Tt,r`1*7Y$CQn%oas8JbO&5LqrGu83Tp@g\UB8Tha]o6qgEr2H2FEuC@rYHk)ZV#PBFC]k8G6<qW9EFQd#Dk%t,gpn#bTIIH\(K:KZqX*b<!GkC`Rm%lMKE75AC%Vp&4&)a#3>XjW.F;YM#7J\0L/I^$#&,48-YB<Ia'kgXE`^kk4DQmR#QMmJ&Nl]I`>^(#I]u$ZZ-pm_2oETClla[/=KK%o;=e3@qb>%7r,l8CX2hFe,D+`VE_bTokp0]l$qHcrU5rG5%3KdbVEF*iNb&M['l%]ookZSn(@O6s0rG$CY<11o9/jDkgMTLm[q,;%lIdCWr?Y-`H*&G@oOP;3HiGCZoOE^L6P"S=TKgu+&&3Peb)a9t"##/0\hAQY,<pOnU[N!?cQLZ50E!=@r@t(YG3r/M^3R)?TA6hQ%;SW$=N#*T3^=N5Ql@6@GAU""fA1]E0#j)$[a.oh1Qd37iGP&]N3HXZ%c?inHZ02q5_g_Z%s!<uqr>#4V6J]>kVtA('Wo*^uHOk=j%F@X#nkL3qU,`Yn%(n1Em[7>=!5=WKKj1f)MB@jkDPdUEKlKJo<I/.hb3#Qi7knVK>9[DSKQ]GM4SQ5S`?,:m&n*N<C;t[%(jTGDP%JOTR!F,\9trM#U*!c*8?,$tuU9,>'eUPAcEaRY7%WIBYqOd8f.oIlu[7j%Rag7O4&gi`A>O[oBL:LM-<2)!0qC"$">l^)S/rKD:%%T4=?T+&-_)51$r<YeH0.^aFg6&T@@(4]_,`%!^qeVmQ@-"od.aI6)t#h><O%f#Ra>qgRlr^@L^Ep"<^3q&_tCGP;"jWBQHtchaV2%0DGR&q^&nSa1)]9V`<(2L>X-#rI84^n,&;=h!tg]mSaDZ_g'@Se@M1_Z<rD-J!sfYM^s7,j5.8VO)t*mdC4LCf:o6MX*3*eo0+8p%eDlh.Ge2<b*W&Aqs8'*"s78k+rR95^mim_64VI)na>MgekGce(;:F-`cbEeu^H[G<g)$2tjH$K/HX_)X8E&B>>^l#8>J%p_noa65%:5-=YQl\EZFi&-lJiaKks2m?-,Cb%$NiF+&HH5$:c>B/_o(C.ZOY85+EQd[=l^R@;9(+I[oc6PNh<4G0q/2=tPHJPZ-W]uJX6Xlj%qYbXsp3=:*B3/W[ruOt$df$kWe"\Gmn9"YOO%21u<8W]"K/:+)XQr!jGn4&J@s[jehP^1Imp/$Elsqc9CgH47ls4q%Qq(l$ibNc3%0Y^hu-QDo(W\p]P213(2KsI:5igC2;4PmbGf?*,ehn7ahK=V!TeZ3U_BR4aGOSR_u="dnYnTsZ[hp6NG0]%9Yh3A1erqlH9p[S*g%IK0.$huBits8;fV+!9@RrdHuB)>AX<^MBRu#C14ea7'#sX"X0JlgUHP`QuGKmllE?$_`s3p3N7nArLs3qV`Oqo_l[Gqs0$)+2[U7%>^r=96Yt#K\,ZH^n#tf^<2QKT9N,+=0CtJ!YWr0Jo=+\;M]X"[bO*hDp4mS`p8@(,`rfE#qtaba]__Wp$X_OhQ\XVOl\Fq8^Y6H[%SC,5Y/ob4_L[W71\+/V>`UdrZI)C*`^3]S5eb9U#h`P_Y^AHm^o0<6=/[,0(p=B^gM%BXRq9)iXq:<G"s5frhh#E]+5(EIl]\&_B%f/M%MkPb)Fn`KFu04);9pq>R6oC2YIB"\,0Z%)bgfX^K3,(;T\#5-esrUu#%=3&dt^"S7nJ,e6:c?+P\i6r4;1VRHZp:knJrf'/:%kAS(]d=:Yh?L$9Hqt&kDiu?a2=&+tFZEaAiRq&\Uqnp04J,:Toll=LLo67CYRl:lXqYIa*=:b?lDX]=XKk'b$n#sR*#5S)jaf#)M%]%n=nj4jS0T0J_1Ve>l%9i:c`q<P<!IJ*Gl^O<]K5JMU=Y:oqC]bc^l0DC)05O@9Wp[GZlq""7\qL8A)lc7>"pt?h1gP<.03B`?$%`E]l:4oDFk;&7IOU9?AIJ,d"H?@DQeoG;Gc^HXpe^E.:mp87l53&T^Qs6]c/55a"a7[A@AG>OOYH26@14C11hE4t[i*oHj]nbS6e%Q[e\,+b+o4n>hn3p-+Mkhu;F^ju4@\lDqNRhISGANBcb)Zi/.J1_6M\4oF8o2fHaGD]X@[C:sQ6eS>jnfi')%?P<22/s61G)t`1<%^,O47+8#2KMW=`&P28ASTHD_2gL$nRT3d`9In2dgTprOkP]FK&\t>DcO#QIZpFfkN?2kZ`HRB:fq+1PZq26>DiC!Y>\9@k\@t4LV%[m,?92ori,m>I<\AC&0dddoEDT)X*&^O,qq,s2q+HMnpmieA/)hn=@-r(Kia<=IhVn$,[C5JM:ho(CRAfmbhno^3^jH\UO-iu<\L%$2_VE<iNjjhn=!CrO`(,d2mt=$_@<X:]LE2J,B*<T-+&&5\hH?Q1'5"T0F7744A8=STgFqo#k*arjQ7R;BC:P&q2JfaYq+fs5;Xm%hY=Gs9_&,Nj#QEb`h1:pCO:oG`bF;Q51M5YC$J?->97jTp5LRt29f^e>=s7tkLaNQ9-!O]f4Eg]OTr]122m[HRZ:QA)PtD6`HJ%@%cXfncV@iB`k-jr^pV"k"Bg5(EopC)2V\DF9-1-&4ST38qbTRrh9PpkN3nE*PZ1YOI]cSuk.3HUMjgSQVV<fugPKI"nOdB)mhcS&W%/b:B(I[H1BUa`B8kG95t5"b(pHqu>k>FBL\bTe.P]H-SV@d_FRCcUXkNKP)i0&g*EXXp76ToO8f-Y>5FN-cFfgXeF9@q-uOk@O,*%32Y'Ceg`1klt`'PD9:8@07_*Q`LaOjoC<[KcG\iij\YNVp<c3eOb&7t\%1X2Bn6Foo&0PQA<ssJ[%ps9M(u:fV3WQ(Euna3AY/(N%V\.Y2[k6rlg3U_3`fR(*QeYf:fq#@cP1!=L=LMGfCIn'.e6(;AD,OTefZRMH(8->[PdU+l2!,APpTH4#?8hL>/?CN,0_][rE3MU0%pHEnm%Yh<0\MT9j`-Gi=B,7uEqo1\;.J==j'_9uP[N]'?99o@084iOoq3]>F=pgDBflPsgF3Nr)eX]A-Q%+gU._)Va00*rU?'/QW%.iZ42^6ctoCYa#&&V8\(/$7.a9L.Bo'TSaaDY"ns`4bPJ@8l_Xbq".LDb$;[,BJVd*@lFjNd\!M9P&-hO/]IV4h+Y*Y5=T`OBP#?%EnM7^k?nA3\fY/$@p>;(k"rNE0/_p8"cem_7U=Tp@h%1Tb-K8_EgUTW[<9u.WU!NE_FF!*?'g4Z`3l_BeI>4lF52!FEGK?*A$G0t%S$tg#-mNCrBq4o#jrHT/(%%C^;!Jf6r_Zgs3bk/E\063MMc]U9mKZWEQQD3!/[J?t<Q6rLj:,&7d++.kA:3W&QFnaPTk3d$J]0^U%)Dg-9l?XERbo"nbQ'g_m>)m`4VZhL?jsA;$<1<!1WArV]ONijkM`^Tk[4KKV;@Od\529:=KPWlMV,i8]+GPZNg5XKmZj,VVo96FC%rKuS!Aj/AeEmuOk3C[i%g_V5H@5"XkWemF0I;&s(`j$"1U?qe_[s_TZ?kCsHAqI+fbL0'P%4u$N&:-/`Vg]c-Cd,GLg;\!j[V88J%mMj["AY=D66:G_NB\SDa:`D+mFl,OCqDpL"*BS>\Q#/N8[G1r/_=lB`YQ<!+7A6#u6*=5"eb=@H)>ZB(9LVHH1[C!JA0o[0*@gsC%>Oho,c\Q.mbIZ8mM+kUAGt6u+q0F1%#P,V\[q2",B4/>L'p1ehJ.L^q7IKcp''_X2NG5^,e"0F(Zse('XsIQ7VmJ3&6o.W`_&W>Q%VK@d]37,GX\_Gp74?fE>2BC$[bcr^-<Z82'1[?pk(m_G2@QOq684m3tF[mW1V8na%+p<ET:f6:s3pJW`@F3N/N#(+.]HTRr-H7*f%J>&K:l0(VVR;ld(`QX?2">Xg!,/^@#))kmV;=YHmoA86?MIC--7_(6--TtSU$0).NNlWGT`\*LgLNuATCS!3j4*DRRXF2!E[Er$n%D%4^p`q_T;jJ(.aQAppV6YNbMh"HX(4W*D&ITLFBEO"<+c5e!]m#D[EAVnko_T958Ch>i[gBh4m=_-<)ghJq11%hnl=HSOnNmn9N%`%+gR4baFE_HKo&NMu7qpROZg\_XL$$m"rRoRqU4YGdGs(a2CR$0]6WM^Zco%a93*OIR?n2_$]P!TDUoX-l-15C9O=$ZG#Nk@m,G%&P?H!1EL*rBZ#RSl@TgI*B+pCfJS>q,A!>O[f@*DqmEl;9gorC@EUO2(&O<l3nHd]oGal&5QbZ#cI$W(N,Zth3_]is!,K&Y6S^9H%U"'IEZB$_Z#T-)j'>[6:NU&7M=`bF;45o2HV8Pi2!N/cGJU,'I,&^`!>8i)R(u'(q^(a&,&_PN637S,a/LYa)<bBqr2BK%,G"H+T%@/pEnYOd@2_g!qW^?-GU!?s"@IDuN:,@H,TP(42_36&tO>!]!FEF>FUe2HaL&s1UC9<rQL?</UK*f,/&PR2/7YNS;BijTgU\e,-I%W*uiE3TbTuI8e6H(+J[-9?odQUmu#O=?iT8[#D6l@Vlcr*Tu2Qi/4p3B/AZMQVp>kY&F(>N8r'LbrKN.b$$ZM$TD<lljfmB<jWMr%1m]Fs^VOr#/!pOf85GsD`4Tmemu2p._%Yrieu^PIQ=JjT)Va,/lRqO*?ZFR<[lJt(JOoPMjr*aFbD+TRG(?\0rG,g]822G#^%?as%XmF`jYa#"oc\=@/FGP-<\@Nl4\9S4l.9Qok*cta$<iuq8AEOVLhuHGYbHQPE@OW2AW-Mu7pjXmYkh,?IFIWdZP/3(J!@_p"U$Tu@%08J#li.:qUoOFHd9jb<$gKS:q-7"4&E*62eg]`roglAes0J9=[e:8GJJ.s\i24jZ)pVHQS$UK"3[l+`s<]Nu<ll&=tFG1mj3^UMT%I6DI</B\WK5_P$:FmqPN[0/cI*FFF25!\!o7+'E6Su+Yf==Ef"iuE$('.+3u\;$Doa,bB$.\m*9"eFUOf]g7B/;#lbSX5$F7cYp2%K0:bA3lpt%URu>=J`%rCUOcsa+Panh,qolc_7JZp6JHHTAM&/M*K#H_]1E+*]H),$D:cIQ$/;^1Ka\BKjC+8RdTcpi'/>EO^>sG;%dgk:BLg\=u^L@M#7i4A\RcuDSGC3pg"TYm_/^3_h<:*]<1LY$[%W!4KS(<r>7X^qHF,CftPuV$gSKs<M(/24'T!>;?CFi%gD4r<W%9jU*$0Vb33jUZ5EdfVjO"]r4X/T0c?P>C[B`+:H5#16npH$-;&\]l9N$5q>B*3.#`X&X#-Z+*UZ^o%\;fUt-F`qS:a43_%A-j7m.%?/)T)!8`"=#fNt9'kuS"O>i8%*"bQ6fRS6TAc%$ofGA?8>7_O9'bO3V"$khVVm&X,=p;e:14aCdq\A*Lo"n]@AnNrD@)rrd)'=lo%8Z;$F!iuJBJD('k,03S/`*0G')/2N55a^;X/K6MCMOd%K$JZ8gJ]V>:Yb_b>_+2<B@mIW&Qs;%O2PH9);Sil#Du6mnCcLa9hpe\[%21^c"!]2(hkVRA`E/lZl1B:0/rkk^c\p2>>mmlEp/:#Y_nlL"'M*lqMJ7/Hl/:BiY%f?ePs#@MM1_h7J![fLa!WpT*TQ2`e0`!5U%G[N'&Mi23?SX18m$9J^&)]CSa*0pb-fJM-_BT*ad]&I:^1?jok`5;cNK`q\W$F3g%\cO2#KQQ$8jTdj\5TqrCb*W0HC`S[sdXc;f%\H5@,;k82B\_*B\jC(KI!4XP^!?m+\j&qHU&7s[m:.s;ui!)jop(]MdO202[;\=u4hT@Y_Ce.%@oq334d/ZGi.gnTT@IC+4!0VJ7%!Hrj4614iF7h"%0!J]nqZ3n`LF2Gh5!K+VQ`r=q+6P/<!4!)!X7g"BqQm9ru3Wfd!m1uoA4")&C50H^j%,cKF74nGSrD#eu#-\.;%%QlMi3Qcl+1MI"TCmLgSC\Iq5Om%DB7q!ED9/%5A8!;JIQlkhmO>oQk`Z>-fiaud'AAQa5[UBr\.BHntBKIH.=l(A?=95P_j70Sa%&V;&I0,#reDB#)Lc\*r)*@uJDY'UD9i]+eh9L?T4Ju-gRI--+D_\s5kEP6q+d$K@:6NL;4E%K'G"M*I+Tqg)2M<SE/f`2'6"Bf7!%d6$aU'_aenJ[rchJqQ),3uF<"?j(7U]3r56(4P8qV[g:/>D,'Zq[&#HRID<F/;t;`JEp^+obR&XA<CXuI0Hi+E^Tg+E7&4G^<.lZ%)`]']J94b1%:B9G8FN2bN!]i!@U(]-Fbp'@6V:QLlmdH#HIBY>1UPa6ZNac_nVVJG2j#p8Z%BQ+QFIml9o+>^I?%l+)S(9)I5&_M%qjFZ2otXE5(7[$#j</pTq^D6U]ja!5TMVTii&.`4&m/7B`4!+E,@#.]=B*!>)FTlFkoJ`$MeJ,*+d4ElNW8*,=Ab"e4GTK^G9!Gk%)?C"^%T_RCW[9OPC(L)R&9s2N1='bQG:uX&.q"hc:m9;udF)(V;+D-Na]S!`K<Q9`b*\*,),qQf!YF)jfF1Esl\aN7V@NtoL)2DN%^kflPdEc=:AqU><M?(jJ.."bKN\5e@DF^huqcsHJi)hB000Sh@Y(hd`Sj4H9229ZpU:<NOa+ObPC9m#!WF-]U0Gq`JL"e-a1f,-H%3<?t+1n0**T[ThA>LU5#RoPMt]kpXg@kV4LBL9c>`XSEmk!#d!&5c7\.hA".)<$kb=W4blSi;cg2A%==TWkUZW.IoVKau$00j01I%THR?dmFhnjF+DM%AT?W^*='NQHVRa?kZ#L/<oaX*0'oMKXh>Nre$L04IKtPqcOFWC&f2r!q@2(hbE,f<782&[j9(*B(d2?.:Y@#A%aPV[<JcRR,"8I*C"%bn,"2C'KHt$up3Kc<<%n6\+l)(VXajZ[f/.>^<*Q<Rre(As>Dp7J$7)"D"/dV^b(]^oMo,3,ISH#JBTc^L:%L7X*OfXDlFI"Wof#Nlpp6e668cu^gC!r'PO@5$ub%KqKEJgo+6`,^'tVh&o/CTInOR)("qpfo@45SFlo;`";,=pEcO_#Oa(83#B)%.53Lg&J,mkFmKtc5K-l88OjX8[GV3j:P0qW&CBBKfb36'%'d`kXPeQkm]kbm=D/[%(4JWGToRdGMQ;K<^caE!c!XeqN+Y%e7:S(M%]T!kc]$+qG\q;rqRJMJ4@kIH#E[%e,Ou!u>`jRH&/DOYo:_d5[b7HKZB`V.A!-$:S&RE7-A,Qc2N^jgO!.aon^`UGGk35o**2UH6%^"=Xm'?9e!2s(4q.=3OekqRf7_-s9"ZJ6Q>(iq5/OF7+a0lB6^0F^&NBYh!KE/[QA!onlOZh"BunU.!44=#rlFKla=HN^JZn1OKB%]J.R<8B2it#9po%+RdZ]6jj1<fj]tD0#/%M$=egI(j%7;qLIba0seqL\B^($)8ZI</J@Nr`a]#$U]@7Fn?q6+Q!8)$ej8J,:[A,/%g__3[)lS"31F,";c6,EIFlruL+qAQ+97q]\\Fi`b]*/4i[fWSUYRU#'GKga#a"RZ+)M'!JlcfD_8.W'A/hg!NSTLtOZpUJTSk+$a%!PEqKY2Bn%cN/lXG6++"Als-)5C9nJ#Su+Gi](Q64'Dq#l_D:Hi-T6Ki/$]2<"YGufJE(Uj%ZH+(-QTW#8",4QojYK`YlU[U"^E%%@n%DBFMlN,/$iZuBn`f4_[n,kSCu,*[?5I9lcai$qo%*;;(V>JrW#SVr.0:FJXD%6=\V?c'$"5\+IJN#O+Xp^P!K!bG\&G>6XCZf%,T8QYfXNA"'P1aq0S%h98^KaE'dj0Wo,Jlj!%5E?-kb58#:uf?KQAB73Jb7Lm1`udE0,1Z636!%aWc!4p;eD+A&FN>\3+.%CC.?*%"UJ:@A8D^BEN1&='h)<f!1=Z$#7u'1GugWo`\MFZEMu%E![<=u>#eG@BJtlQ"5=1@O)`&i--SAuXPtQ;bRDQ*lc'e5hE[\6"rCh"%?q6Ri4=OaeWph'RH5Lu>dA)s,eQhWc\GbY#(bl%Y=N:D@"05K,m$Kq5_'%UW3j8i1jluQdq"\OKEK>X#".,aAd8Aot5nrPI%U6bd%*]V0qK;W=W+;iYKNbi:IT8jp'`suNhnd5Fh2MhHh-Qqp$(UtLD!9Hus*fWn<lj#V2/OhGP-lu8pE!FLtK!RUifXVNC&,(!.j*LCs%I"n=U`-k.X+J7'9ndf+9oF%M4<^:c,ES@[m8ne0ta?b.f_co/a[AbZ7',cT#UUoY!]*-EKoEQCtb3U?<TGC"T"Yo/"SW6;.If^!g%'f-SEVc'au*\6.dKJQ'bQM[%MX>luqPTD8gV$l^eYQoQkj[FO)XUk>%)\$HkF(;$S@M]Kc!Z5(<KsC,i(Sj?TOCP4e0bbJ$'*r1T%$e2k9TRjpIi4*mKZHQGBVX38&E*15$1ecn@?jcd^"i0oCc?L!V%4J6N5;<!EkZB!e##6:Nh:T=*n,T*MNG,[8=H[+03*X0#`YuWW%[U@bjfFkfRSo5Q3479hg%R<_uZK+#$hV$r+^'ot`N4e.4JLjLJM!N!R9$%`3!%>]bDoM</XMW$iL''O)l0_G""P6T;!eA-.A2#t^%^`!VYb7$B6;_@cS@+)2]+=#u+bp+-p_49H_R4im7,=n$[&%[Cb-A3-_K,YZ^@7YMu`XOnp0G;c00a`Q1<H)U8*c",'H"G"$iL`B(%GR#oDSs<A26C:>,46W>47ei17hf(D1N+HOV_3/36ADA2ON2PE]q;Q+]W`dOj"4e=2ltUI1D_*IXb='!2+V<3B$5`60.$YPU08=._%!&[/tfs<S-:qhcip_,=a*_[=Yrdf/\38+M(1BtGK%KOr8*"YCG]TS7EA5m-2+PR&hKpR<s%AU12%KM\Q_Lh\Z5ee&`N-J&35EQ3!%[-7/0SHaiP/o^sn-L_/UN:f\J;<ja9c83SU4IQ<<(k'F2NQI7tY]Kt"j-VPHTH`.lDn<V!#I$NbHuUA$D_,i0UW,4XpBkqRfEG5t%j*djJ`g8!eNNn/`]ZIM@.UbX<=^cCl1BSb6GfL)!`I1gKrHH%jQM`JG%7@TLC4Q(nQA.+.^;1H@Z#GA`q#L-hgS9,jr+0ACX9n+,%UB#ggCi$:Oecf=d<ccNs[Xa`&#WKI2[@BD5!jWaR#?pPe(ZC;H)(6=?&fU=mbo=;KqM2@d9Rn2UJ;8b+nA9TVerFn-DW%]UJrBI<%;,Ilk`.ld4FbRYJ#W\]-p4sa[!;D-*7Djn^/cq'/K?$.OLn99.5gQ*GPcnTT4!#j>!9Sn!=oelT`TensKIA\lIQIk`_T&A+SjZt"%=PB"IjP1G6&]]P9Yfob?JP!pc@.DTuUl>C&i.Y;7Uo2^S6k>4dSdHYs#S;Lg:CbX1=Odhe@@;,:897nNHGcK9Fs%fuMiN"uEX5oF%f6keT9GDBKo)3jS)#un;G_c\l/^J-C=`A\s]Ra&,*JcmHRJkt[=-Ei*;pAEi@l;fO_2;VtA_.5gI.$Fm!5_YC1jaVjqP,ANX#6LS%jiP=4Jq[iaodBk0)@g!oirHc)q0WYnZ6d?)[cW`K-?)Y'VK,R*".=,k1.;a(J?48<n1HXV\1]BQ[UrSBJ;-&V`=V+k@=Rd@##)gl%o?J]ki*aR)+1!>@L@DFg$%IT^!'2\>oE4UeL*G_p7iI?O,\5p`17GRb`8EsD-Ih']+=eQ7<7E-j?r1DT(a,L&1^ripA`mnpPE:;L%LL@W3jW22IqHsj-c$TfhI`4Al!F3E*nLg5:@Ff*,Z3DD*CV^5c!7sE,3C,UT-L=s,G6:S@eQo^dS$D[7Gs,][La@ci+pHfrquh%C%%,%<>M4MO/XP.bK]k0HT8@pfJ,LN<XO:?-G&%gPP5PF"lm`*>PiWs]hO$;65`#NJG!sK4#ETE8H!?CUK9X@(%)J0t_JJI2B_22;W%c@V`>)m17ja<!5lBuU4/#rDVe6c_<_%`oM\JG>glQjY.)[fjZXVJMGn>gG@&,h!$TB0\K1k69b'Z.pRq&=d_WpLRJS&2e6/Rh,tF%]C2mP(T<Ju[cl?QQ\1F+#U=8hIb$`1/C6M'/5&cJ+>a<._6VB.Op#bf+3)U!(C0OQ*^!s=SO[lHPg'>o*Ukj24[h0-LdgJR@.bs(%K8kEdPJ]LY#n.p[XS<"H#LEG]=LlOpnEn5q05q]>+BjMsj.@N?\!^P*+GBF.P>8p1R?G*Po*47FbcifbhY"AmeP$0`-E@AR!:p8.%]7;7\)9[m$87Q&WQ>4-jfhk"3-]d@QF=1]>ecJYP*3q4R`ZFX*'.t,;^1+25I`B8J$(b;E*Fm8TNXEPko[dV&JAHM3lL$4)2&<O&%H&s.r!QK<UE9X/4.j*WFHlEsJS'Cjb4J%O6K9buHgL<B+*.7=AL79+u0bOuf"J6N-gm:D-D#>N)/-o,qg^JHWfjN,;8RgpI0`qa`%GW0,,8EpQY"^"h?Y*R`m:.F4*O9'$&M)c?-.,Y]Ze?AuIenWb9"=?[C^]?"C)DO/N'TC2[CdSC:@ZSlgTf4&tSmh!Ds4NcP>?&hW%"uM[G<ER(3'>;61K\>!]6jb,il.Aa$]d$N.5QZ+[+p2-YC:pkV7U5J0Cj_9o#(TA7:s7_"BcsM^'$M)l%"]2kFT_5;3n/R>m8clW%0H^dC%RUlE2*`M&HGXF@4aZ[U6t)u/2CM:4&@J)F\D+_0$s"UW%uSs4.WO*,=kST4jH#5YTBbi!^:B$oV9t6<,G8a/M$[nc7.Q([%j\R.o!nNEDK0hGC$L"1fA8U1cjG@T'OTBa6-VhOmVOb^>n1m)S('%SZ/1cHh1G-tPpHAo4BDj"!&-m!J?q8%fW)'c2O?l1`.@[7@%('#m008ARjcb^r>kXG[5V3@[W\;(NfIE\O0=(!p?&n\'jY-sf+dg`OeG.;oFV.0\5:]$)-!2NbcL9ffl&Q#k+Qu4l4e*4.Wgeblp%i3PK9"=OE3@HPm\"u*!@-']_Z9HL3UYra`[^iTkV5fm(PSh-&K#`n"/PHd!0#q00MU]pLH#`n?uMFdbRYuta*.\:S>"7DL<;ug]b%KX6F]6,A5FL35FIN:LC4VB($AGpQS5gB6L01C_n(Rs?.gm>`?CEA4eBn,[+/D-1OT`f(4bF1Xm4+Yfc5>H/4R"G:9s.;S1`ZME=P%3J.5OSci'"+O,4sN($O7A*uhPJZ[Q)-mn0&N&DY0*nr(uZ4P6-A8&2OG-Jm`^aEs`QG>8YAD:)RUB<@YN"r2u&S+Jd:jbZPa`.VC%c8bIMYh\Bac>jnQ6\PI_f=8"uK%`\mikX</,:BoJ9\>M"D\#PIMAB\n9RQ(`E8Zbc"P;VYpb7FtY_fDCjOd;D.e5lOFBNi^E&6g4%1Z3\+fYS8pcqm2QK('1A?IHB\)FMFOs(uWS@mo(O!Htmm0>!d1Jf*dYEXu2Y0uIKU(9gKU3IMGb#/93MQ?2q9"2u*s/7)RUNkp`#%7Bf9E1d9J(a(dqZg+X]^$jkFf%498K:^^C@@M++:8olaHaD[Ckf>Xg5S8cJs7i'b(&C(=m;D>\tP%r;!!=%mFSd8s4Q()`sF@[22%KTue.iAX&r$k$6[oK4durkY7>1K#$Q>S'(!qns59.3#_sK:+3EUs;m\;p]&"PZV-gqO6oP6An*,ltFb41YIq;KB30mZ''BJ-9SK<%iECX$L6#[9B\SI[05tDp:GDblI_h>?S@,hqk@JVRLqmD3bg8/&m22eMicusm&-*-nJb1$\5W4(&?F\`E)=_F4*E7tBAgY&!pa;R>%kRKEVhSqR-$4I6.o@X0(_os:a.HlbG.H$aCj7=$KV?@&L$%?>@Qt$6>Sd26Q@E9dS0ej4.$WILi+s&/,eP!](=3PhK:q&8m]H\[*%,<r<mTl(/J3qfSs%2J6J_KRP\J1]CG!%JHlB]8o7/lW5>$(.6`8^:a&9WE#`pjnP-GX7;DKj2.io*>g-K^NVFNc>ub"**6;ZSe8D%GB8<ZF2jB1J#:"?Z\4N:o-[r%![<g,1W0VqP+'m<nlcPK@o"R)%feD#%5>e%R4[lI6\;?^cd?ga#uN_@c(=%[V#X1lDibC!do1pB%Xc^;$Zc=+`Be4b%cY-E?SMSGsaP"pK]nki*Wrf=4Pn+'-d>F%jlj\n+Ufr`!@>!.d$e@1-nIO82[lHD<@/lt#&r7uKZnE^Xk!6(o%2YL2FR*?p7[qc#3U$/.ag_TW<Ka7;S&DWPe#..Ug(m?"`^J`c?0u['3gt$'u*=h6d@B_>VJDD%Dn=[SIEN<6+;*Bg!T!!%)Dd])H%DsN\jL)J/9Xj!XfZ*O7E#TNmJRtDNH)eipKZ#(gXK4AM$1iT)G9_ccA_l,9WTP/#l3:P7-!)@qte;.%A/?UFIk"qqcK,<0qeopX:%Q8D;I016A+MR8k4b^.Bhfi(T("H;2`=O5&J_PlUJ/7L?m4.+AUY^_?]6\9>?@.T>:CSPm3I57YW_!lpE;1p6k*E4%s#aY]@@3ApK%j@8a94K2FX<QE=["f,<bh/0#b<"+,\IK=QlKf3=t=VIBomU;)2QF5$uo$t*+:`5(5mFfrK35B.9gYfhqGY#"5"o%CSaEUI);DkkO%V.:Na`nC:H!'Aip%j$<g__@O\045;YXM!T+3g0QsAePloKo6ul$jCs`Zt(RoN3r2=AE4#<$)='"EPk$]4[N)8IhM`lFpl79#7b?P%7,ccH:lHRS$s]5a$C^5\M8Q`@+b8%!JKCb6n46V&4^kljP"%&TBee-HA'27)SpWGdfMml"cXO[C8Z8j9E\\'')&.EdWUL6P@)Eo*%$%:FE1Os:bT1S"^5!eb^G%T'ipEpdhV/P$DZKQUZ5fV[jZ\$ls=q=t;=F"s\^n+GlSRi'25dNm9h3089LX.at!81MQ151aSV#>gO%5Qd\0kY9*cbf8ek:frYHH>"9T*ed%ORg09I^L1IP^4CE3@+Y`@UL:K4DN'qhb*Zin=PVh,=E=c&\ds<CS9$ID,jJ_Jj(<TMpnLA1%Rus;Zi#nIhe[3!Je'=3*L+mj1@FPSFiQ>uY8-Ju/m'a#H7N'A[&t_fT,:EWPnWmT=p':I6QI2dr'lE(c`sHPc<eu%c]r<8(,U%%5%(,]T^&(;%3X(R_h)FhT)CgLI/n.<isZJ[k9Zlo:cB][Oa?uo?e6"mhYH"GBl![IfZ/-c<JSR32SL/g;DK*ASjANk'JTc8$j6t<k3%k]I]:FNZp'1+P,5.'(TH5p/(QTS*g$jdqS\`F%G[HGIA!FCNet!DYj0KVgP.,?mQ7\J059,8<ZPAp2faI9?8"RpL3t_))P2J3Yl3%&B$IMP@l9BjY11ZZ;`"0/Tm+FRaLhR7V75J!FH.OQ8,Vd5r4L_)\WRn+CAV7eHhAHpd&fD:hED*=]dp&0GSM84;b:M%T%fg^)k^M%1rj*=TE<uH*sY8<TJ1pmVsL\;\7t]Ji3YdZNY3VK`IR7iXVi'c*3KB#5s9eA/,!jb4:aGM0s#!H2;2pOesmQ&C3GDU778_!Likp#%jr)pCbo]R`aEpg+7UQO_/cdrE4Z4uoYec84+c_p"c]Z,kT)%=GcDiG_@\,hnJ2BM*+:2RioZ5N1n<M;?!80Pf21M!>TPcOfKW,dd%"?$Xuo=u%r#rK;3(,;,2>iCQma78XjA/k:3O`I)=pYLiK04u_m<h`a`21[KU<Y;ChRRs7pOTp[\p08J;1OCV3U:Y&nYQoo89#\\7%PA!dj,Ik5eQr[dU7YFgk,]MsLdH1a8XO%Uhh,]Xo/Ej<kEm8PdM\nUehTV_p9`tQSBJ!]s_)"s+k)1U$HYj%G#Em'3V7<!o>aZi/%G.n8[kNp;5@ZN^Gl%:X?Qfa_MB[6RmQWE_sKP)X`RAPmU)tSW5=_-149t(^aHBr.D=F`CIkcA/2nAu5qcT!'6lQKqXX%-/t*08$4%05Ij,@p=>e'tcHEIaVePC^cmhLML:e!:.-2ggj27"&&g:aioe`McdBcL*XQ]phl<-7O#ZTTH"P%#tZggN1#4K5TOd)d:1\%"fWMC%['=T&1se>\DP.aZe-)A1f7X\8L[\kW<3s718HFXYi\rW7G[V"$0L#k,\i";94@&sDAJfFSVCk6PNom#s<Z;],>H\a!Vi[;4.cBbB%Ga,=j_.ADt)oeTAY9$X^g04U7P>sc0oha+rL1>;K`>rEbBhmB5'R%g_GH93$UK6<.$$(Kr2j5ZEHil"2P,Ok<J3eOSV%4WjU<0O@%LM'`q#h0BIXi2KZd3bZ%!l/4E=fs43jq%h_DK\++$1Vh<F&Wlra.XT]l]'^pfMKKmZXhXE_5n4aaR@tNgP4\to3]+0?Y85KQ.O!*%.B8Bcni>:Q<47V<bm'/s`G<h/8F3_Em%G\N]6JFcE=p"@@>.*1K#k<A$O=ib09!B'$e'pC/^VIK,qG>+@E5aE\<#C44l?F<llD9G%,@-n=@QZrFBa)jB'0e3H\BADtHGr+"Mt+]XJ-ea&9pOJK!g"B),^ICa0je#.7R<9.ETJ=1@2Znhi.W(')8L(;asLnC7gGo0%()[t%',1uj:lot4gH+i^gikUWN[-l$!A/:Hi\JcGZ"&a')@<%<$Gd>p)bXL-3Go602iOf)&^:d`.iG_sP%HN<d%8)YY9M>0Oj#4#ji^St%/DMqZ!FMm-G/,1.Gb6hmo8#9u_ZM&4"*VTGTMWEP^g;2&aubh9HYeX3eO>/")($@f`a`dr#=?[uQ*_qJn%tSU/>&u53VReapUXpk%Qu<(@E6APr?u<e6;U1kSAmCleXk'LiW4e%8-l`01iS8TJ$Vm]U@*`03`Igm9I4q$>:bPGV2ANA8+rZOMkl9<1lnH<$DP@AEYO"Hr%K<;OH0m0fIfuO>R2cHNA1i@1cNga0I6@4dfWcS9d1S5B]L!qa)P@_^TG78FFiepc<0<obJJ8*'q/lqq>J&R1$0IoTqfU)2<#r5o2%Zkn@'*rCR>p1hG4g1HPH5XJ:fQiL7[L=Tk]Yn$\A6\tgpE$80Q0b-muC_`__9<<ZsZ[#F<0OgU!31gp&`tj]a;OjZQWLgZ,+S5QY%DU6nb0,Aj"\9G_$qE@@>iI[1^$f;n-%-PEd=`DJ_9I(@r@<6F7S+I!##K6%\,Wp6(n;o=[4"psR_@3[,*qa"6-E&30[Venl!N,%Y%kinV2D9WaPELbFY*WLIrPL3'FZ>gCfZM'$AZ\R[u>P+Qn@Ght*9Ua(E:!:gGiWZ>:MnIVo.qJ^sn>VAh":r[Ed'O)@6!]I1X96-;%dDM832P'0U3Y-k(ZR<(JG4"N!-C+,(Sr+r/':@Tr+)?W%D@I*!hWgNUKM`5pGMW>7QqkhdArkbFm/sR#`n]a#-8CBKf#_t7:Gl`4%eXgY/-8'YHD/%[6#pq]@8O]s"ENsWgRcIl^m]bhiiGe:nP==gAX60Lj>S=u%\!HS=irU("&=[0L7Pb&-M)uaoa?\[m[Go*51P,U:%MKlFCKf>H^cNKR=A=]s)JAUp5-^m6'oEqi\LBGJ`bUNi7,Q%(`Q^EHf)u'q/`WC%D;_:Z8fZBkBA2B+o=S66U]B=0AT-0pg9B83k%D,sT'4DU;tKc<:uC>*FpGR7bV4j8iJ+@I!&L3i+hX:8P;&<!bq_%3S.4Kq=!+i13C$C`$>lt.1ECUT1<'J$Ob6eO36ed<:C`DZ;Q%Ln>$->$.22Xu]l-S$%["C83\aTo>2RQjNi=S]oM=(RSuaLa1![F(?e7JM.=f?I.gqf:P3NhN?)NXFE$qV&k.i"+XT9'^s_$C#g,o%G(:(MMNod$YV7#9grk)r6",TX:)i@)S6k]b;EZ!N<m$kg>ruk'Gei@Z%1o%L_//'akD0:Q3lP,)B2j4Gn1Q:Lj/Xa9ei4O[["9$9%b"=Q*3$A$%mgQ.U$MCHccH3)Tr75WN@?+["m6Iu7KY8no[\rH7>;q<Hn:_`=+_/&/o4d->Cb.h.(uIh*\^tYbeAlC1>)/3f.Ootf%iE>GPP(t$TDdc=7pb:,mc[Z]V%k66ad:&#Sna2:6%5?*b@pb=-Z(=ZUNjB?R(r4nb>_nk<o@]eS=93ALbZ<B5L\$8'iZGF/p]6TQ%bj8O&\laJl*@e;A$:FS$j8l$2AHZdV9j-h.3V1]4k$^,U'qT)egC9("A)"E>eUo/S?`a\QjuHn[]BMV>rE1gu%C<El5<\9RN!^*;%*@JR=p3g_DNZ#6=/";DG_HJK\RBB6]D)rUPKPipsN`T+l%["#U":ep;4-%Hgo8#(qq!6@FLf))?`?_<:G67WIfns6OQIl[DIu<&a%oItfSC4^Db<ol9m-QFWD.]\\qRYK`<$MkHU5^%(]Y9=EAMi,9JqTBVkeR_Qm?VPQlgR2On%bmK&<5K7c478;8><W_j)+C$-NLT%p%>`Pr-)o`;t[ot;7'0f/lX_]?:BOO%Y)?t5qI:efnk2?p&+uAiW7VKn!Y:t`jj,L:0_p_hN5.bXg!8Y(Q/4^'Of!,Q529N5`hH'5B%GJNfr`Xq\,MqnG8fm#Al##8Y%-cUU'OFnQBi\VC.m20hLnAojm$B-uTL7##=O]kP6a,[>Zh-q(O_#de@c_JcrASLc6D1V5qIMO?#%X9QcK)^qNX%!,Qg\=,&ZiLC*Y2%O4!n%]PNX8C,6J4r\,-SD&Uh"YVCS(1OV-D?_.L,u0dj?)9YlO+G8/HHYt"0$SH#e\="'er2[%0M$6Y/t4`//`+][WSfs6H^-2(q]M/cUj\b@k*U-C12+n@8;Ap(=Mn*J(3?cV1R895K7@;WJV(qqP/+)r?t:'\NEot@b'=)*G;&/^%8eH8XrM!@aEh12"Zm6(s).J?R@$6t(@i,a'#e%T;9X@ok7kAHZQE\R`RK8o:0%H`WL-t1G"4h&>=UEFV5i$<@B*De.4>fd5o$*AI%7p:hp%5n9WfPCRsMPFm^ebXBjZ6[mh+akj^)q5/H2l1R"Z()-<E!3iN)VFVu[/ge67O/jWb?4ZG]5KP@;M.KT=RffnfQmP;-!"Wi%"q,&_$qmVI^q>F+8$c3/LpQcs'oZY*,VqTiah&rHq=fmu)k&E1T@T^2_LNXB9c1U`"dhB]=`59:`feo%Z`"l?1C%#Lo1T-7LDA^A%?(K>Q]S];OqU:&>\,Hik?#\L/fiZSAf!0M91RAlJpfXk0edl9oGaG`3FWQL>1M_FJlV!6om"KujYq`7hmY:fm0ahC)6DJ$-V$R=B%U$f5O'@`%671`olS(1o#5b;dS!]'kq9PCVc%eadH+c=\XF.I*QdY6co*f9F3G8OaoD_TIUAd%.;H@nOef`;<LT\01U'to0A!e"LH%LIF)5O>(4I_`JuCQtL#-9OYboR[\#0R0[&gH=Ig'Cd3Rp(pt3O#?jFD&rTfkCZa5'K<.&#*S]_\=gM9od72DL^mbqn[MciFiooaL%Aj6K;DgLoE"Gj2`c3$CEY"jq`(W3#b/(7a+4>?NJ/k8j:X6FfNP&:_.ecaWhLH4[4L)5HK_[]`5\<+R\nZh<:(`5m]Ha6bSnGSk?%IDG_&X[U]h.cP;c0onLD'8<rMD8P5nCm\M1(?>UKbLl_:>;<2b3n4,YHl0IOb\:q5F.`sDajM<sMg]3GjZHZU/%:'P,P(!7n^/(d%LIp33BaaRWg5^hqY`G.kPfp9I=3=\OP]g33.E"m9(/K:XOc&Rp=9F3>:VjQrP?hc`M_Y7FUNPqf!(e=1fW*bV4YR'5&i:SJ>1a9L%i*tD7@qDZO3OX]p1jRa.GPANbkQo.+J&?6VIT[SJ&5B2`_CJ$E,BMS`CYA)8!.pRs4<4orh-%#&"2)=O07>it?Em=FP2:O2!/n[q%ccNb4W7td2/kk=d:eP;]kj&3Qg^5"+m6eIm/08Mp/V):O2II6<!-lC*10TE(E&AcQZUGlI@=4%dL^u"?N\`3=A"/Io_H&/UH-U'f%O/I5=2TSt>(\P+IE`3#k*bHrU7lL#^>>mr8?4fDU<%WIaqehDMQD\-TH9$>Q?rG[\Fi7E\&/JcFBX$$=F&h@[=`4])K>2LQ1"b>m%'j37G:GLr0[if!`N($!:f8?pSB?'k6`P+9h:sRF]3<Xk2j&3dRG0:>X8^U':)QT]!:[t_n*/HN\\\YP;!ZQcUg*P(@p8#d]8J[=b%1lVTBO.)PSJ7)H><m4r=3_t,KDJP/aT9r,aV^u.Mk&#X[TPPBOS+tmmJr<dUG+"'g+bq"=N#ciC7jBQC[bJ+pCcNnl0ho.6:h.ZN%bZDVi!lZKjL;E]1dG(c7&6-YQN&Xnkqf,Xd+E#)sZPfPUFu-cXPA7,*E#A#=MXYaP1Mmdd=,mS+Q%L9C4L+1e8Ggo(l\X"^<`neo%'j;(E=DEos!2T'aZfQLM*39ma%%f=gGdSi^9pIET$9KrSXThbIM/1cE&3&Ogk$[+Q4*Xoj#X\u6[KR0Eo>W+I"b$H+c3S]#bTaIr%=#Q#`jX#!;F1Xpog*!/Mg`$'(nR?:d$GCD:e$eU!^;^qK*W;G/rjVLSC3E-W*LUD?c7KIuMR#aHh*7'Na7aaY;m32;&?fl_XCF/Z%#?o5<n0cRsF#cN=(*7GJ3M5!8c&P]>b-DGQ5YtTe>;]O#!o^.1-J0X_:g\<IdrCu4hi`[,i$UqH>.S4PHQfK@h?4\q_gJku=/1PU%@CBLq.[U353E?Moj=ufmPSgQ<6)#Geg/t@cS[m^8SkWtW1cj7l]]u!h()1ePqACk(Q;2KcF:AZaRaj2]DZtPt'%+/+7[jNddVAW:%Ht,(2*1R.L9r::L+Od9u<=KVe%H!Y:CKgf\kQ[@\"+rAf/*tbsl]TAb7KC)XGL`E,)j89"D=<4O45h*:`X[u,0FrQ&Fg]-`6HS)#%Zb!!eKlAR*pQ6MT&*=&;a$)hIJ-u@*;`qMEoGaDdDH7Q+ZCF&u!L8H>b1'HRg=TeOdedI#MD7!HTX@A'9b^tipo<p*GcPM8"JFEP%ZU\oM,pZ77DSrn7)[;>ApbN%pZT63s$H;E,,tIaEot/ELJ.e[n"hi*k8"IP-1a%/UBAA26@Z\fbXb[])]qebC#gC`*Su6B0[_`Is%U"/cL/)B#uO2\CVq0'BM_3-mI_#q#U!\f-91g.%!Qkp(qCp_h_WgZ(KRXm*d'N8n2YjR?I6(3qgBG$OXR'oSV(qjM$/%h,rH&0l-%C752KAmBI64uumb/h[;Wb:N4d+2HUTQ5RKPBJmkc9/T"(T""*7*FiD<]o6"7>,-/%9/G7FUJ)9QJrs9>DVJ*;;Sp^tVRZ-LCknHJ%K8[LNe\hJbNWY@N0[_or)bJ`]d_9BsreYpH]8bs):rkbiGq7O_"r(a67MZaMC\o8/S$c3tr<(7K7ENA45,?-B-og3rDG5TJgb?0[%mqLAF//.:M_f!Y79kIKPedZ8[$jB+)W^?-5mTZj@[q5``BQo<PAjBuhd^&T"/uY8M**1%QH)n>@fUr;@>jZ(=P1s@Pg,JIs1&Ig#%]`_Bl0d,'Cg)#a^""%+[@c8%U"kkmQ^c(WpmU^5VL()s;=N]QA]lcRoiL5kY_mG?Hk*W"ji>)%q\Ys+Al<Wb(b."8Nd>$)K"t&<"%4_Dq'"HRnCH"PZ2`")i3KD\lL\0^HgJE:5-[e5c!2&d=(?L2qpM%)OSFE-u$#h!.aSk6#@4j](3CROPh0Pj>#51i!$>'pSRbm7%,%;OW>O*b<3NGJ'DVV83'36]-%tRm?Q!!^>;mM&:(#&?@/tk*DT5NM,#^^87\bfc(C/5FZ@Ajffn(eNdWQZiR?1`O$f1X]p4,d4_A4%,Jc:FRd<TJ[D@dSJIB*/<l4lkrJ_A'&4`9ba?`HW>Db`a:pt%>#53agXk^T[4A5-t-I<)BJ;9M(CK7fZCfWsX_??I`]6OM0B^aL*%#,]"ZR'iF.juEj=2F3fi1PZS;eYZce^!,t,k"@t_]B>S'S(b*grh:5J:a=>7(AIk1Fqi<P&$@T%ce-Eqmc-ZIR-oM_/]O1j:4';g%2YLic@BtKS*<PQ4XqnXbdkKc3PJ`*[#M+-/>+.VBFRL0W+)#djLMq+3ed5`&lO<1gM)>CP3#A+&QEc6*RU@TRi59Y/:i`f2&TQW,%&$T&W*<SdKDR=8dq%7Y+h1FWiTX*QplSp[ZB6.:W8OPHLglg^k87o2U"OR6m<N*utVT_!P&q;XtO:NMXGt*[A>;4?;D#l\8m:3C%%Yh?*LR%5N]qiG``%=ps><dP2lF#iJNkdB0HTUSOU7g';Y/,<[2.VKjr^l7!?)+IU80gKtB%@%7WpiNJk8Ca*7'Qo$iLBUK[Xq(/#%(l'DA"``2>-k3&>iWqFQ-9Xc;4IU3%Tgk>r$(R)dSI$pHY;:V2?uj/9U!=uCLD.E)Qc:]nIb(JW4'UCC2Zb[aC%b]F"Q;qtT%J44%`\1jYQF".$]7&2SadiS:b66p99(B!]=?Pp@^_fs+f_(8K7I$A('Uo,FY?G^W"-%Amk?c-AGg)GbJLcb#T'tDJ'#^1gLiX<:,4rmP%4li-$UcAm]k_7:$=6;pQ>[+X46<gPSZgnVn\h,l)*>8nUq#s9)h25)-T!:Y%7L+*]qE79nD%7N\>$q_U_lH)-@(Uip4&6@KX0%sG%8I9\uh8p/:i@&0=+LI^@aU#e!+`gV_oe0,Q<5^nS.u^?R%j#t-nbBOrAnDeF%/?cuZHk54ik?[0:=BI4BT6GARshFtB(N57Gb:F/%Kg!3s:7umE;kPF.RBYQ.((G1)!7gSQ8+@_Wet=k;9QE8l/EYAWgGT66op@aCmpYk#G7t+;%0P6m_bdFoa;PL:#7Pa\N<g"hVpf6c%h:t`-`L\sAS)DqBCIrIH>>ZKH/[i`N&23YA.D/O9@:=dOf5PK?4PVd7Y3d:bfYuVM'T7l69bu@6Tu2&UX6"!`9"Tgh1K:_]r=D1r%=+an7rPhgCVf*c.'+TPg?qG/ri\8ZZ,]82#0$Q^YA$eag+`PJ(j`i51"1guFl\[D6`nKsWfM4MOch;3)]AuVoGBO//LtL\CN(k7l%-SnXh:j.=EM(fm^o%X\]<D3]g*!=d$p'b?!R]RSn$pZYN'f2c>>"1F"!X&F=Z4Ao0=YmJ*'SQi$J`CJF?@u<``[0VID?oB6K;O7:%$EB,P<HDU-kgL*p66rE0RTY5"n&Zgd2BN%?<<d,a&\^RKQ?BIYSq-m$B!r;iCer&g]-]KOl\97.LFu/6Gh?u_<d9D@aeSE?&fHLK%ZEo#"L7Sk*="M^[6.frWrU>IAfA'E5(BK)qj0r<SMk'9BG-eP[Jh=UMH^iQkR(<A(*K3g;X'Umni0jNQ@PC6T,8LVINMSc`2nPtV%_&W*R_Rh'ljPlCt<b=0rK-ORIM,hD#<.LY+c3DA`E4/1M'@(6C(VD-j*(,mTeR#I\%36J<LH@O1YpWbd>N.Nn.rRYA9QE#'hM/dM%SU7TF%`@C"8__:iqC9B^(UJ<:j(GO>e%K7teLtV"?qg@NJkNAHXsip%j#WJRT/F\Th.+/Nepj/^!=Q-q/=<F<b:lg+%_EP80dW4L%+g,fJb;7I%[o6qEkS&OdU<!)<nOq!L\bk&'_6\[@Tbqk,6r_1hCr-9g[pK0B[QpS>atfK8`\F2cK<SA)oNArF\t:"W4IZDHX?bJF%-,h[]TejSm;:ODs[(%1K+`26+Z8/CF[0:&peY?'n.T[_A+>RXXX5CF<78Ng65T4eK\\P],#Lt.q[bR?7M&9:/<!+(TfF4!sdhf]e%NEs0<W0;X7&`FthEGaI37#>/3q(RD.lZ`ON)e"D$D7!B0!M@72Io"S]P@G4-ci=RCJSTml5T)/N2!57IBV(j1`I+QE9O'k?@J4Yh%>GX^Vd#4r_[V]!Ke_+60V\2AuWEig>3HZIt(2mRqS.$g48Slr(^Kh1F2"U&Bj]eaGTGu#'N_%X]ZO-E>%=!Md3s4_IG2,:P=<-B&%CGc3Nm;96F(DKCtgI\p.0;u@\:BT>2=c;ZP7kqKgn:et'h%hmV1rMeu@+3A4AUms!Vq#r[!oObNDR#C_B*Th#$Fg3=?+P?b#:/"k%fbBJ<<%6Q._l%5$OMjb@Y&OgWNc(40J7qS2\ZUtn0LBA8%+*O*cpf_Jap^9JLu(;Z_<ih?6Kd%b&o>(AhG%_'GaXQp8V,ED[]J7C%<S`EWi6k^sbM3YNT_I+RbRU#V`t(Rbl>RoGib#Q)/\n".7>R'hAmB0/etdY9#"j(&6R,Y_jgS__(7QK$^M"D!F,+Z*7XQrW(o&1-%X*'q6Z_[C4.iQLJZ>%a"UXdZO1%8<D1[u_.]JBlDedfO/:n2hf+lE.i&hFnTmQ^)V".hM#2e)HN2D)b:Mk7K>%Tc1LKB?p#hjQ+?%i:dgWmD($DBfeCDJP`ntF;2oZD/*[cjY/2+d+7]d[4M#mA^B_!DjP>d1ZP^S$^3r$apuTUX0CT7B(,?&UGSjG*bGhLQ-5%+2\g*!%6muiSTm;rH_'?6ue&f%#Lm*g,E1mPX71TrcGWdtiTPf;+5]"NMkM@N%erSO$_&PK4YG!f"):5;g?0;RK<GXZkOKtRK]q.r!cO_2M%ZDQggji2%/4k;3iM0=MS+c_jg%BJMf26@?%AkJX/c_naPc_.NR9+iCa2Y\0?a4N5<R5h`S&(!1!CUBT(R<,Rp@=^`+"lD7tai1TE%Sb]Z2>6H3G55jM(V^]6+]Bg4c=&8&+I(6W,i,+G(N7fi$#G+VQF^]MF%pF?k:X*klIBb=E\RI_&SS6qs`W3+1[osGe.k8!0XTc7I%Pk$t!-+6ne6;/_<@G&N+fJq>,/&9!0q&CF8UYH_L2`rF+Z[<Sjib6qLF6?XRbu\`K(3d[8gHIa0_!K?\nZaqBcF$d(DI:!2Ad,UT%>s.0=e7dO\&6-X9Z<DcA@%R%V,+c5G\`Ha7lmlKppK8a+UIgV+rAGX.9l-0:(_^?a>No2I(!d_[7<HppF!ck";$4S-E!ASPiU\/X%oJpa8KdAh]PcK`s>,cE?Fgnba7E%r%"RfA1FTB;:Nu@a$CrpK"C\;rr[k[A`kMq;uWnXY%"BX85+Sgfn)a"qqlZ#+TKnY&"gRm+^%5geGV3(_?UnG*S&-J(5fIB)WHl%:NAFU"Ot.0AgoWJ2e,H\]kBlumsD/aNYTa'NXAZa-1AVGm8FZi.[b_EE&32*N"u;9n=+B/69n%EWB4?NFd1PJ$g#?kZ0;Z]6Mk8crhNXasWZU"V<'P]=0[!HU-%O^M)5aD+BZ<C%I`F[X!LrZ1kd"A@2dJ$EZ5NT""2mHWtm/</+:S%=;$]OKCCGSG""TSdK9ooU+g)\R&hO>ERnS&au1*nC`rr,%6@o]FrEnJ0O`-%klK*%BaZ+kHS*sfJ@Rq=Z6pKtdPXKYq.p@aVFtuI%ZA%D[TjqeE[aDNk!7'+B'eQJAKVge(r!LJ]=qbM6h)uiqj[oJ9n)jYR>I@#3q-X8rI"Y."biP<*icWQ1Z%4p*V3&bd=C;\tAXh-`%4*4l9%agrCgp;eOP@]G/B&SuLJqKG1`IQ;FR9dV&k7a=9C\1R:Nt3s/CuR03Y"Cl<a*>dFD@bfN?3:>d/B4o]rK-Cjkqcpj$U4I.%4:dY&9m#tU4-NH4YXB&pBbPViD7e'$JZtnE8j<!f@j7P!'<HtQd_r,TnZi>@SS!NSWCr4_';d>c=O&TMZ3+u#dU8b=co"kYOX2gL%%i`N@C@/qRU-5!>_U,jt\(sD,0tt7D1[t2?&oRCk[pK<S`l>(q"ITqi_h3KIWs0=7Zh]cSfcDi=/tGRQ#d;KPMLcNbD8cjLnR=jW%doic.16r%l@L'bEFY.=9cA).8nN!3fZU_?f(;9(/:A[fNT5@qrmHoi=C6jd[NTN[4?jESnluSpHS'K$*o6DBih`j2b!=FfILM4.h%'6&?=Kq1Geos#9JnL/)FJPCA6*(j"_9Efgu$l>E:Ns0jU`m3?'0T_<@f(iHSD6jZj6?M[-\%?=Kpgn(Z5S2*u-i:+K^+(UVAs9=f%9o??Hk32'H<81k(Yn@n62tMS7W1l.sB6F`iMBETRU>5j2J[:3`F,B:#Y[JBek1BApYWq>`fO2RbI\3oR^FLG=JI3rW!k7V@+J0Z5%q\V-RMEoJtmIp;W$<u8uXh,%EX%h53&C;a7(si=HEX\6]B33S-6#9.eVXNnFpO$uSlk%VU2_7-)!!=uBeRs5=?lQ^RAD865gcsbV%Jd2GBM^@_Z2/5K0Jg;P@*S@]+;N8q(7R%`UNL:3$[Uuq-id`u\JJ]mC@NB'0mYd'=j+(5Aqld<%i*Y8%m[UCeHA6MLE;XZl/I+`@%]!S`cA:-p=1hGP,P]8"=%S*CBjTF0S4DadR47&F/*k@VOG(ukg%*Li]#eJY_MFM*-KmkpFb..M&DH8'bG'1dO23Tk3`lZH+P^+)R%(=H.MmaI3s4kM[)GAJTg<1r=7$#OjoLS5\RN-/(BA+qqc;;a[@k#,Bn44tkJciUuuc5Kj7QaZLaIePQm<`%bCd1DpZ+Yj(u<:^4#%C6P=@_guC->AF@>Y3TO"TJ=N)8I$GSLZG`F$_$Hn?s8kWXM?&<>F^X)5-iliQh;acI#iNnW[,Bo$105I#JinE$GHboA)e6W'eEsR%b^69PfPC1/f#GSm!39]R*+J-gEZLY\Dun]%Nke<AMSmK-Bo0@@m"(0._h/pN\R>gjCPik7P((=41i<!*<O+V3ZW3ULJsai]L#<\^%B%\`IfM-t<`G@_nEB3@"YjSPd%,$Y%_]k8OD9,JW,XMXQ8fZT-?tF*`[k[UZ7qZOW7%)YMQj)V.:JP]`A#MN\"PMhE=YQTr3,=>Q%,SlsZFYlDmEJ#uaB7'iTlgk\Ga#4:ke(-Z#3Y,lDR'!_W>MlTA`U'(UI&Z-[rRV-]Zl%-!jsrNqYEhYKR>7!:aZa%0bUYg4=Lg:7%m*^Jfg6oY`YgQts^Gtn&-1(o`ZnUmkCU#UI0u/*Gf"shegO,=6i5^aif4OpKHE%(oM5"Dli/GQ;pstO0MdZ]l+"$!H9uBof]YQh%%:CdH-(no*."&^._>8Gp-(FqHfk*$<*0Jo\O#;-oL!d5!q/Fi9p2Zi:f7VTX\c..@'RC6gaKdXBtm^%ZSs73+$2I3ao;c^$70d$,Y%FF!G&!M0e(DITfo53H"F^18;tDM&P-6K_sY(MKNl=T^LKb.="8P0H:_Zc"IcK\ngt96P.CQgN=kL\5sp&l[8GG\jm7mXQ-_NGTu+%p>+#pki:WQh!4M+G0@@i]a8'RD<Z4<3huU$O57Ne9485m1mspGm`H^n<X4C'"ZM#Ch"SX\W%Z$K6\M*JVU.0sA,Cc^ZZ7CYhW.>!%AJRc&,=#ke*Q$LgfMMHoZ[&OmKU*Jba4,3!eeAZHp%^S']ce$5@LAg"M,K+CJu2&CC_=QJ]:k/%qM`fLXYs\dO<a',Hk9-J8Mb#:%GI63SEkr(ZeQ1+-2/f6sB8Y)UNi^Eq,GFSW8$@)n7&EZQA@`V?k2Wre&M5n@^_!cSrB*+\B8C>`_>4A:6gOPU1lGG\"CUGl=fj3=%XQFoJG2g,86OXh@j(!\8cfdDcH<:-`(5WgOO:+5_$_M<ti^MLuAfI/I.B>sE;)>gf6Y&nk@/1B[iticc'H[R@E<E\<X>-fVK5&3$%c-M!b0Ru>LqUE'VB3(PT<H,'d,Oi!m`!W0^"/E;JZIf&C=CMR^/CCB%U$kP$iNmlY?B,FfWDLUYB_6QTdofY9DE_BX3U`0^>heoo%/gK2>-Qb*#c68ZijYP2&!U:U7&bTsQK[:t!?tX#pgM4H;o3o4r4)I13ngN%]Zu,SSkf,Zd[S^g`HeZg&J1a2i=,U;CI&oj-E7X_H%Q8`%JA%3EK*%`as)H]qX=+%7>!!``Zd(0Ns7UtBP(ntPhqI'mR-nmF!B08O9JD6?0j1'9k>4Tr$&,=L2'8ipH5Cs(LM,;`t%8!%'%Lm+Ac:!!X)#7S4e)7?%VoOe#:SHY0'o-7RA>$l5_5[YD*iC_>'29C4JD^@<cFSg1j50XErZ3glDkG3B*X)5e"4ukM4gk[HS!"Ojj%4Muus/3Y-aAL7?&$lg#'dX;D"c&kj&k/0;(:N40'=Ms"?pA&5.I2JRSCJtKte"lYM53e4KGDk!Za\\G^`isX+KL^'DhI2>qV[e6e%&QD\D<\"J8>HjU?AJShi"TTL9ci]>G911UFLJ=nn'jf9X5Rg8[\Vpj/\EG6m[TTTBfS'mH$Gm2Gc>8^O<mo8IWfKI;adt\*!k1,5%"bSTX2p<8%"Y=%)rFY&kBAUiZqfiFhcOu.!QdH_rUqD"ZTkh+<=n_@?Eq`tTCL4VdiI#):k/&5L^7EXlEjE"R#)3JT]Vh^en)lD`%_tCRD8:*=#Jf0Tun]fOe^S'tZ(goEtNl.al(fVRbD7u$Z/L"*-6Y!B5ja?!-MJ4_-8]Sc#ZPe)<kh&5@EiBpGaQiPr!HE1bU-d?4%,Q\EI1n.XsE>+<La^]*K%c9[)_h32\8#LJ#kf?7r7<GLDK@KGD%b'EcK&^H#7UWcd:]VM(Fe4P%/ArJ0!c5HfA@Ljb_80k)4]W*(%aQ@_`QLi>,h/7V_(dt[a/3DPr%[lhiN-1UH1c_&;55B/gi?=#*_<pqXq,ltJ,D>Rm]+KQ%9s[^cA4m9%ok)a,^/,DM[1%8=GbtLM%IR?,8Ab$]pFUT?ikd19TI*ll%ak%c.cOKWR>?c`oS#=iL'gCfE%?p`Qa'"Jlj)fZDD"CNc+\AV5*t`pE`nu\_+tu/fjfiUmM@hhk%K</=q1EW:Pc,2FYAsdusK#I=Vep\PWcW1SO1h<Hj;Vq$5fc8KLF0^GT#!fsu3&]Ok01J&X+rDRUd7cD"D#5bjQjh+uX5hD6+Z?eN%RaFh/)T.>(T[UU1Hko!Q]3XTUlt,c^/dS/0RMd(;!J&-i-FfXA1'$jLZ#7U(gJYAF)n)7g1uq@E,fG^pfa.Is,bL=$/6fmNj4(06%&Ao[[C7W[HR?ssuI^(C3@g//?]2(<T+a\SSDnF_Y?'g9K!%,)P=F?08r%@aQ>I88`8agUb+/c=FZ_QW7Ck3TWX%t.'F\88"8^bZ,%Df[Ya#2JeQAN"\N/[f;PIIqQhkQW#JVVPZ8i(i(GY+or?CCP+?l;Io4bY6U4-Th1]@d\:ub@0\(cX7B*@G^Jke*pK;@ir]`U:GS[%pR/"EFUH#6e>&V)rK*qcqHQ[_<*C]UqG:9u:E-I_5$un%LBO?@fX/'O?)e(A4k845>9i^;MF7lKK3.dYB#SsrFVJ=Ed#B):R-WGG%eu)ljUeK@rA`qgu*D&+>5,%B5\Kj'I[e#jeF:esAg7AAC2AVcV**+9/doN@ni:Xp1Z($m:lBK3ULJK>6bumgNI)(pk:s<O[T(^sb%aEA]3-RLA`*<tF!J*id7D]M?:T(<3`59(eb+9O."X1PqqSfe$:]AD)jN\+n7bUeF]<(i0A*Y*I/>8-)4kC)WWVjl`j--INmGEEoI%72Gc,<T!b%?W[:5\H7:o&O*+CY&#KkQ:;a&XR"toJ3i;eJWi_lTp7bKI#o,UV7@DBYEi3^2N'-4JoDqGe"\`S3C,^(%HS^1CDAZD%C$`FT@TQE]gK&VK0J#g5NCf$nUd7u&d]Fsh!4=)dK,bob(.bl[JGp6Fg>)?eYe/1\;HbFKe8`U)-?W$#=fsK='QX@(J:uC(f9LH0%F<%89RfQ>A>RuB3E3("GQ%0O7es$o;q0$F*YDK2GM0,-GnNj#2nb%Fo^ha/9UhD`P#'2">e+N@>!oa`b<DSZb9b/a#%G3tK9R/WD%M+h(8oT=Hf':Hb"S51ATBdf_Xe[bk+5g*dC2$"i[[`_rk3kp>'/G,%sai'J-M5:D\n4;iIVJ(N%G":ek#:-4q4p<ks1b_\iF4(J,%,4S6mYK.l_4WFGf8ljgFLkgrb;RMZFEoIDT[ZF!YoFb%,Nb@6,"XW#s,UaoS1jbFN"#G:gE9P<Hb_8e7A@*aUl:6EGe`$fA7'B#)%!G/ZZlH.U]J6=bC31>qk[)l7#-25X+i1]fu:k%:H!.?!C>CoHLQ]BPH>=/l4"k9>?hGCYR2j1;A/MdH@6Ac)'0E"D<]'cdVUSYT:%!DU%Y<InaX?)%"6aD../A'o$"HaL$nX:]3X`hpiEB##[f9L]Nh\dV\u$i(^W(a,ORMj3^m"d!E'#o.\]7/eG7>?N,GCa&WR>1f"/%fWu,p8R+-_jDr3c<EqQXJ8WORPD8C*>ab_UdNQ#pn)%iclX=qB:=;Dr4Us<2=)`7QSgHeFg468S0YjNa^]U6`W<,'hOBALS-HQo=%3n!mOTg%/\?=#D#*GI>eWK=sGZDs`d;F.:?2M=#O$mgaDYg_RnW:`;oom<?Ghi2+MXoR5r\<M`^@RJ_9/3OhC%L+8+D[F,eYV4+f%"3$_C0$9^eC^_%`&HQ\g:jqD)2P0%taTg3ZK3(ncPeke!:VosGjel(G"dd/ZU%>jr&cI@cAK-p>Jp4;21I)]-b35,>)\NE4qC5tY%`=d&_Xg+IE6V[hm;?X2,"4eaU<0RYaC(W='UqJj,r!n*`]HWDV7rMnG7'obklB+[YJs6>0nq=+0-J=p[Y,-^N_B6%/HcWYN+P@*q%W0N\[L4odq&ZdAUNe!<Z(bANolVcjF@]i&e#Ki3E-m/+!>$n]@#@2\?p&r_s)IT(KD9;Qn;Q'(I)@(>j`$<!um)^#t%r.Ccjg9Dl%,VL;:=NE@D<23F`EY+-@k1]J;Uu\nS,c:qT;q'ID5%D.NBa&"@ed3p[4VWi4/_dQ9>IjF"it;Wm<Nh1g%<t_j=m!krL*?U(#[%8+%S-<19R!'"":[13-k[iA^VNar8U`F2uFAQLY:%e.8NhEgQ2Ua+Ta`6"(f@pD6co.#jEGd/LWR69k#nQ[Mk]oUi+CL`01'HoF^d=7d%),'OGl`/I'2Icgr2#o9\UZc5o%oB!d((u-0[gj%o+Gn_SciN)*n&Oc1_GEiO&Iq4X;,3OW9P,=H2r&^C@7L!Q#`phk.gc,,XZnf^%6o`9[<fqi8q$)6TdIp*LP2_n@KKY!E#`pAXANMZtWG9t9akbF@fX?r%$I>W/C''=)NL$lrc'OM\&TG(]Z3<DT4^c0r1?cENo6*J/%.CZZF%%Hg^Wgs!ObqDXZNu5,X.B4GFI7iZ-^opHP5oE4lp.FZ+P)*mb*QSqX+ce\(,*W\<eO1gqP%8FjN<"qq!baSda@$(\"&.`@%VBd!E./F4f'FZQQ[5:<qPf852-UX#WK!3eLY:=+pJ3OPS7*Zc@bV:aY7gb=@'N#WM2K6"D+"ZVCn+CFP`bq2QSIG;p"Uu`dC]\=\%!P_7TSr,[]r\Ouu4BL/ZCOK`=:F5+/;Q`J]>4rLm^"Po\&7r"8$O6Z%WV>e#O9Z'F86iV)$UPmB%<AaXi8JQ>.3sgF[E(o#!ItpW%g6>]o`1UlS;@ptkXna_t-*8TdOf:T^/]@p]/M42q"q6Tu.*A9O&#?Oj<7t[T9!oHA^jZ#hV=C[S!ee]n_Rp,Kf[Xps<jp7H/hQQr%g:s#P1dT:gnlf7F=n:*@0N>oaR6*Baad,1&8+.,X3`6cW/3W+MP'HJQpB+B1H7?RHX@QDk9Fkr$']Do,/p[ld+E&-@?(``(#R!_)%m:oGN:)D9dY/!%!4&A#9#-BaLr'`^Rg#Fh+I&i\#o-WlS8!99G8.*lno%KGk\%pVEWerYRmVN,mBkFB32+S5!-aL'!h,N)0##7r$%"D+Wm^ir?ml>hPNUiN;[HPD6hq^WIRB"!:rGgte('BrB]7>`B(OI+<q3Ba_!^Mn'ee0iFf%!'cB=j$Zf(<Bt\IhG<#HhnkESBDg]%<q&an'=P-4C!db"*b]5$!hq-/E,d2/;9A";:WQnPLl`OuHAp9>&n+Ua!C\,*!)$QLno]90&PR\S2f/d<!L]W.o41+T7#C=S)5:?%%?8_fUoS@rJ"C'&$0*h8Q.0Tm;LosLt2:rTa#-B:,7/PQN04!_])9E*9T<4;0dZ]:QXd?Mi/Ir_Mc`iJ'"js%oAR3H7UO?J'['>pW%oWbFS-AOm0"I;@9?rON1&9^=C;aSU"UD0=Y7g,cm!d(uKqEnUIlBZuF/bgT%f2P4$\0"92ap=3$FL_tc2K8u`<$m8!lO^_pRQtm\%S9#gu-rXiUDhh4G$@C]gZPNBhQmuVdbNbmH\&pN-!T@Xa<Rc'=Q)n$$KVYNr+&3R)E59En2V6?2<W_Pe-?uCC3NiSdejh;m)8B.D%""kt[%e6'*B?DU/*lggJ:,0h>TT.'YJ7(uQBqb88I7B#UaN`'Jl%.8&i45Z)edehS]\FS/Qm`(BQ\F?(4YVOfb<USY.nQ2@em&<8%dB/&a4\^OZP7b/q)(Bmkr,An[.Js[)U5Z\AoEcOgL'a2Pc=700$N]ls,.NCZ4$^mhbnI>:%>@sU72pKUD-qk.M5hS"fhcX-=)sOJ%CT5jUa=$Xj76a\]N_(r03i;PJ6UQJSTM_MC!(`F_7rLqhiT_ibf5d#cJAj?CD\nqPEslA-_3BML>$IDdPSuut'%I(Q]IYn+oiKgF%8(H_p&SV3Wk)Jdlh.<YnWk/:L^Dd)Mh^-Df95:h37^`;6>^Hp3b8rac#O):Fn5M0aTp*:pWc&>o)SKeE]OaCo?,2]D=SG2FpG3!.%XKX^0S7?Cu3acVs:\_i58IabN!*bWm!teBX[_Vc5!)X7g^aRQCj\Xi+4F,/YDK]E+l?d'A%_5']A4\gT'"$&$%2nOQrZ,-p*r!]O%<7*sXfg2XedMW;n]!Min>1At$$1+T#K0s)^gUegNiF,'q*"3D%lasX:Z\7Nr-!Af-'`nb;Bp"a1/nJZ.@b_ZJM)6L(kUW!e8-BlK%+ts7tJja.2r=0Bt#q_P=e>ZXHm:<KFW!3Q4q^U$]/9<kpCanHc@Y51>mKC`PNLpM=OodXY<,n3UjZX<ppa1PQ1^JarH)8se'"q;5%Yt\dC6II;oc8q+rU\p@VBRo7j,/j,>^oauRZrH0U1Khj*KM3WN.=qe#8#00$Y\K2c)`bgg(&8K<Bf[hH)GWSc0\SVT?&\V'JF]).%XQY_3QBJ9ZEgS$?9QX^)2;r&'7LVP:HDHk6\fMLR8@Yqcp.;hpOMBl1J2BS90;BHh:9o2MeFo%*@EdL?qSXU%GM.1"2)=Ztec8,l%*H>@G'S9"`HMor`_hMi'/h<a-Nk325Mop>7\M\5i/jS]-2<E27=^m,+a-qV&%c(D@>AH_m&QO6M&XZ((po9-MK;^4ja=6[U?re6J%Bs0:Q3))h^0e(fWC4UE/6)J`5E-i"mPcH8M$g:H[+n-^e?t0WeZ:p4G<ojr*?tKnH#:LZts2!cr!3rrAU6&m7dLKPaao:S`7BKr@%F!NjkWKsKL0dbl2aLSE>6emMJB`/7l#u&-*2]dM$!2.f]kmE;4B\LCFO\UcLi%hUt`$_tR>T8Hlf?2]<Ah8'te4YCIA;tu/8=9oe%4cQL_6#^2JA3s#[8>sF!*t2b76G0$W&2$e_>ufH4E(`i<!D&a'RS0;4Gkl]s13eoUFL<8LTrBokJMA$MX/A0Z2R,)7"a,Um=9T).%gjbD@oPZ,S^28CodO#/T(1I<edZ\KJI0shBi&`MO-ctg&>U5\@"%EP.3O"ARaQM&oi(Za`;l,X*m$"7U75M),Z1Mo6gVu*Y>0+V3%L5Q6`#&sL]7aY_.5G[u[l)1X&9Fhai:e9:JT'Ac/f`ZYG,t"HT:<EaFEg:=U!-Qq-@7bYPZqD_J#-@_4:sc&OJUEbg"3<,@hAJ^+%FHfJA*[q+R[m#_G4\/:feYngLFddu*?hEi7pLK`H7X'JbJf"e`Ho7.(CukXfO?=)@S"YX%_tl\M26H]rAc_+4@%JR:*9i]3,Fm#o%a2$p!W.qGteEGhVcp[Vq&otQ3=TX6.%3WtnF9*>Mk"NLK,]Q2e,D*c64Y3:HR3_:&!4#!cF3>!=DeV!QY,Q-p7FoRq-FaTbA`a:9%5cFhdbYpTi6:ZN=0rCY/k`GcF:0)8%"@hPHORYh6&p-[Hj;)kYEaX6?Y@(-:n?m!d8SgDY'o"L-[n5FS;@e@r8#9+X'Mo=uQr/1+%9+nHrjrGh(/KkB\S(=Q>K-_Gp/7%t"pio@g$eIDP2P#!mr&taZ=r>33AZL+aO_d?bNl3$IM?`A"jLU)'^*$WpG=]c=oF0HR"f*\.%bT#$BU)\]F!EB6BdlXKk4.!WR#R:+'8cHOC@I!Kj8*PnEj@0.oWG.WDYNVL5g+m].n@S!OQ_`3%5%0b3!0^QQefAuhVF_Z4!&,!X%Jlc8>'TY#WJSq-uW$B)P!t%/sRO7t4(33n=#U6de!4P@@=rS5a?gD2e?q=)N#aIZJAef^5+b4R*LT$^GR1sm5;hkNch2eF`'>Wl0%_Z<@0/^TXIH5T)]UW`_,Kk4(H*$q^rD)MNI;ZI]3O[YiJcl:H_F#6^o<qS5B1+4c0+-C^5EiK*iO$>0;Y(Mh(3:</L;ZR5j>u"H2%I$D"GCI9GY<_T:iM]*gsMB7@IaXpY5%:sGu,V5'ODCr1##id[C-C3f0hFM_1e<]4HpN4eMli>rT+!M-/#0I6)i6RUaKs4lbKNe^Y%KTnc:E1_[rEA;*]Bp*3do4S52%ls0o#@^M:Y%;+[5_@/-.5c@?=m\J^,GASSk`N0D1'_QCT`icLC:O`T<.eA4'S/e?K!ctOQ15G*%C9_">.4KWP+<UE"J2WR`&?WIjVfJ;<%%pQ]P3BK)f!n]N;10>Dd6kGiWLVA_7nD0V=bViIT1Epn]9,4;Lm5l/hEhm3T$p=]\2$.S%Z:+@+j=Pq+5Bt?L1P'`$="35T-\ot4o:9\HQNSB6SdOs\&Ze5n(mkWA$LS1_+-D"U3[);W#JXC`ZGO<nF(S]>:4@Nt%+C$Ef16KU%]#6$,aZKX(UH2CI;EGNhE'bl3hIpr)TR6_YKm6)KZ9+eqZj8bh93NQo`s@m[C9ZnE=27@gl6ej8D2?IrKIC"Ac_Os-,V`#*Z=>[2%>mH(WbU#;jNN;\.RRd=Zor[s9PHSm/CNCVE8,]2HRSK\OWhQd":Cl%_L`F)^kSRj8[>f6'L!e:*R!%u%Ro/KNZJ>qkPZ1Fq9Vcja%1T>Wu!8^7[lEeX"T`k^>iXFcg$VUIa$2"L-k@F%^2AQC>:!ajE`=`?Q'#lfc!3JQ`&p-'b&iN-F#YQr-!3[M4=2GBm<t&.ILFO2s%)N].E3F4^W/Tns72=d!dPgSIKe^<\Kq`uZL%tIh4.0kJk".>`=3oFMtdnl92_r@[:759WB8Nd'L@pP>sLQ#:B>kY6m/4gk.ME2)t%J7?mSY="DEZ>(Ji5b^O!lW`9sTHL&t0,?=*A3u%`aFPBgPJ0!S)eBhmdLoBui]fA47:^<JL'Y"oOK`D<5NU87HR>N<_a=GAQWu;6%Z==9R[):A@#1m&F,jb&TW,pMR?'8q(b]]XNDAWfUa!_$E_::Q_D7jJ`M=bIKjtY:U%%)hR%$]lc-kfgD'UQ1K"(j)E&fV&%*In.J%q$JtR^uX'F%fo,)>]H^h$OY+RbU&':3L/#%@+mOOhaFrp+Pa7cfT6E?E[2>tPI&eST`!&$$`^8SY:lFJN)DV"qg,6\(>DB##sa9i%!"G\I?pBJORRj#qo"YqKL3h(GR/eH6E"2^rFQjJIjs%+Xb+(qZ)R-\!g!kmnBkhh$`XT^F+C<TK)2'1/"RcK@CY=NJU4D\XK+(dH%$%s3-Xroe9nq.1]NY5`QX.Ig-CYNW[K754a:!4Sl<E"#c!L+utU..B=`AOLq,q/oSg47'EBf$A\"#2UaEbL)lG;r--qTOrWA9c,p%BimeT;X<&j5lIpq.u6,<P(P8)Z?4:;L(U;qWZgRu;\;-RHH9>Y8rOtY2*95H4dg[f8f[1t!$Trf^s_0ZELL.94;9eu[]!+>jJi4+%4Aqt-irN-+1/jg_`=25^D4%#nb!;8-WY-/>!KftZl:@"7/p?.!#1GCs5/p3DTq3>E)jqG(6N^TK"+EIfS'onJ-W5PB-V0J:5feKd%f#K%V)`#OJ8XZ>*;77;[Hk/`6i^coqXWc?$,JnQD@7O\YbQu79!j=4tB`S1$[R*Pm,&hiZ-hgb"hah%4ZMIa04'<JP8BKGU-Y^Y(%CqqXE;sciqPl%5N.r[XD0I$9q0SBZp-o#(33=XYVn;[d!@(eU/FsIW1!jro/-dNDRS5@CT@'ZOiLd]AQ8?\##=o!4qQNrZR!MBsU%B7T6[!B_`27?guJ#\NoHk^\uGJHO;5RWG#Ae7>[4m&Hh)]#q8+g8_HXWG,)6$s6;l93Zp-:^n:J-P>j0[K-')n$?qh(i5ic/B8ee%[Rdfn#6R=/%"W^t^o=_@;$C3SSig,6@4556a'BL[4hH9cAPu^[7?GgAG:!Do/m)h018L,^@7,d^f!gq6*#]\3PUf<JaFLH5,!;9U%a+<A"I4ks1!+IS'hMX.tZodA,etgF7.Pf^6Ndq9IS)0gnb%,Mh@R9cemTSL\8iF5aUuW_23V!t*^_*BCqon;*p*7M\!*rMfj[]hb%b-l?.#ft-aa;+n1U6\\*d!X!-"aU673(qN6)!FWnT:_\catt=;!:p%572l,MUo)+nZBV9R[Ch8Y1\X<Vj\c.(_;qog&N_1f6Qqq'%CFK;XA5hVR&$=laR(7HUMBc`7\SiKmRK<]\Ze1Os>[3F]N\\+J-=Z+QU1km;]aQMFHY/'<6fnGRSgKeaP_<?(m==?OQOoa25hYgq%bX%(k>mNK:M'__Q,nU'_8P,,g;s:8eq'Y2)=+P1pQ9c8I(W+]NK8H`[g+'&?m>*ntQ,@<@8V:^r9!uX`&0'6#fi4:1$sFp(F*+D)%2$.-Y-"&?2LG`Q)S!,OF&:)-LTdL.pTgp%JM1uRLWbk5D;Nop802GH^fa"`=a.A.j3KB-(Cdjj_qjWG_9rjfNRhA!$_.OH:\LgWb%&c3s7g-PsB_3RG,bgB2kYY#GQ2t6/LT#@(*ClT]_'G8/<8AuES-BQ7J7W-juJ9sk`pK7#3EFJue^g9i[8ch[9J`KIr?tX.`N)8\0%o:4%Z8-%3Q=g=c8M@P:[c&Bm6&^^]!//e/I9,^\^0[,,D*a9N5IEJE9bYB2"!7JrQHfb;Bkr\Go;R-r,AY`U+]/>3=PUNHW-6[D*%Kfdq,RM>R(g=$/6^R9=Y/5rRAZmmB=!X5,mmWAR4PYQ1ClSXrKOZ8E/P8:,52PoFoXf,V!c/mj`5nlCa"_nt#HciC(E4dc7;3Xta%e4><rBEJ5N;IWenG^654H-I,G?Bi$[fa`p7L6_s5MNH;p7TR9qMjf;E'`t6If]X#5_OW+J(3/_&.V9<-;sQ^0L#'#8!2hTiOMPWZ%PtdR#(ZhrASX$G7#&9bqc]RU0B^d<JJ5&W@&NsE+C/,;rN?D<p@"0tJ&=>>\5ig[b-"*g^6q?C*OO4O*=9SD]/j&D[MS':P"=8#d%PQh&q.s(&Wq?K,Mr#<.3*/ueHE2eV>,=U=DJLjp0dErqf%'d>E"jHrUicu_411<br2tX>-b`b_k]%2sLUk4'-U@1^#&a'.3F#m,T%=Wm>%AK2,XR6hT19XOLa^I+6.f"gNeJbB;l$Up32ZX=PQ[r]o*D-QW=k+TF1\RK)&jSR'Cbf#K.;%p2E/.6aj0#5fu.QP=q]ihqp%oN[XR$k;VFomi(2&c$LRJnebL-&IJICg?(a?%@Hg*gOg4p'^@?5hlU&$@mY)j2&h'Ds/LAP#>>`kOG?C%=IBE#68%!2L;G/#Fb:j%m)]mK(R!Q&F2(cojecf631I^f79]5\k=0<Q0H8pWf&SDnd87^,[(_ll78\/._Nn>8cnP97N<PqE@b^%&5T/#kKg\lAi2[G&OWi;$%8OB(;7Sfm%\HD^D%9@N15kRktDg^;..:l(V$ckKE\-/KN=HTr$&PW]k8G:P]:e)3.1^jHq<o=m[/>r<X*qV.,P%Dr7N.W-i@HdfX%Z7:8k@iT'_g5OO;9%3i7#PG$[En:H@)95?]!f^]?HhXIgdUsj?E5',?*L#VjhNP:q[[+quZ.bF.U>Z0OY8t1Z>Y!-B6"G(#5ud'X%jIOAt#,+l^)@:9%"K'[AB@Ft#b;n!_L4Q=ge0NC@!U3G'S'_->].h<SNW?"\@X"CtHjUSF#/H:(;S<D5K7FW%A@o[(ggZIX(.4bZ%D+R'F[NETp)5UMcY,BBHMB[=r$qV%3SLg3ndf.EYp%gNLOb"Je:$uMV/J"7o5Wa[i+i.3EBWG9cnu-ENAG0S'OW:%$PQCM*N0MqF%.b5Ik/\pq4Z\,97\cW$836t'#V1I)g-Bl03-B>guO:u<8c\XFc!Y\#+0Qg!R!6IU^'q$YW0?LEHQ[l<$PXo[WOR\eE=X-'H95siO%4?9';,6?XU"@+N/F:Qi/Y\qgE"PQ*An;F`Bp+D@Y+@si]6'NXE1MH18j*!ii#^-fT13>TU5G!KWg.)6[5h[J#jLRfk+[eAb&t!Sm%_5NK^W@,TPqYWT]&24,Q1n7MdJf0\B(C=Ee!#W;#0fp5p2CDj-4-1LPKX^$2Vu&IcntLOk@1NAA"=qtm&e8(sfsN8qk(=fZ@3t-"%fkdt$?YRYrB)k`DaZ5!:R>sB7fdG.BZkjYmdOI74?j\S\:<%F0s15)M#p;]#ZOD=c.ndE^Aa=2ub;SG-!F@C&>9@FPr^A_)XG0Ft%Tctdoe4N@j\W(N\?,l$b-/EApn;5M*f5/'V(9>Y<!7>e]:Mb&4\0E%C%lE#Cnh'+=TQjge3?88[JU6VM[+"OJ!0=%K)UB$Qia121%+kIW#*;Ta`G6rF>ctYhUe<6NPZj16Ibu+(#TWHOpC^iFPjr9LnV<u,i=Ypgckqf,Y_"u,0]S*@Bqlr&!,&j0\jV@bU^Yf3Higtau%>d`'M7tUE`3pGBf0LK4]U>K[LEb3kE#*0XiT1U*V<,J&E?fqu_?<+.3NC-AB+A"@C9``Sl&5]3-We="K!q2hET8.caR2oId_eWdN%9DpmhPB>_K&g4O#_>u_0f946-F,97C.0$%o$1uEWL2nri-aag(.&39Qb\BB[DY4](L+pD-(K3fjBa.6+<Y%r>,0/7-)3H\sV?7?+%,0I@0KN8f)_[lr&1D<)b+'mq!(Xb?\a_=W#!d$WnFk?j86Xhn5`Mr?\;pEDMTGt/a'"0Z.MC$dnH:.Ndb<QZ%*-&]g2GKIi?X%6D%&d'Z4A6A!.lj?Eg9lZgpO+(Ep.R6N:=,"jlhnd`fk,H#qP&d5"TCQQf0bFm,==7bal/h-[n@F/CAftjn&#T'='u1uWQL#cZj8YqX%]GnZ&Bju!b,Pb\EOHCGRF_L[o.[W@LH3Z=(7!/`<i%fg*!29%*pC0821+;gpM`*MjN3p0"%gEu3kp+8o2IfKsj[28t>\;4)I2d$q%EPj2J0gP#>?7bGSKN]D<&@hru;Y5X\/S1:pD!7pTL23U^:UUboVHOE`YcC#sJ\s%e4WPt&D"K;?g%L*f%K'rR)A"k';-nqB!".S^%R?1]]C8k#Nl"#oVrL2:WoL4XW4;d.m<nCG@oV'ga"$<8h69A$mTL#8H!1K>^;]FdUV//"C?h?rIccBL3a.>>Q(:>YIT*Vom<"jda%*+8#G5V&(I4d(H8EfL5=4;iBGY+VQ2;m4YJ8dk2a,'lOp+Rj%R4\c+h#$Kk>BBlpL7M@"T8==$54p!m@9Iqk]^dRBoc'<%*^B!)a%j9*(.;G,AoR5tIh.N@'(>_K1(nITTKDgn@de@Hd906^29>)kVHXDO.O3nc,_K=1j#^i6W'5lGed:2!:En9rdV7>&?s%(4R<Z^B-d%`/N8Ac]g'r$WWL"#E;U`#-?DR+DFRhQ;U>f.q2lHi#A/f(6=`C;a<3*"4F9>&ZuQ:0Eh,,JIi%d<!3q+>_OIScSVjk[H<<6bPWTr%,7gXB3IhB@Brc)D0N6iCSA52BUR&>a%t9P?4LVfJ$r@5TNhb,4\ja.3]p0H],:M'[XQBFsLCXK007$erl2YX%KF0iX:KcO"..Bk<%-*T4j<fj)p&\\>_#=67jhVJjQ0L3@N+$onu!:kh?No&,7:MZ8T>\T'&>?icn`PmQEhnI<NZp<,Q34"KOO[)/N`cW^@W7>;GL7bGs%Rgts:-YLpEdPQ'.eE_K^B-@:NoH$Y]HV$R+PL?B"SG<;nZ@%b1R^#Rt<VO%H"\.JehH<S8866d";AjmaAi)5&<eJs'2(=[e?9$ND%U821*?ZhouNtM<D%f0S5.3W5Tg^_i4UiRhQM.(]ApDYPF[O5sLS,bUf5ski3#MZ5W1OBI[3nc_f$+gfC#;:c9)fj7%N7)Y@;ZW5o%UkOpkWAQ+N6@3mu/7T.uW/c`c!7@gj/tj:T=!M"q>(:RDg7C`'0SGGjp3Z4W_4bhTi*,qUEpmZCM?&(b&i;HKnp6To#"7.k5ZWk@%7a[>Ml!2>J":r?R,TRH1L7jMA5Zn/!)\=P9&f"33Zoil$lIu<4Tr/[=7lcou_Z!k_!Eq"ERoSV>Crqp(7?or5Gg.XZ[P37ofjE5e%:pT;HmGRN^0rN.%1_bN15l6.Ib=pssO%(Okd_NmIbtd&aQnbVk;'Vc!oY$1m8$miq[Y?bu/f+-5FI:26;C1tg7S^QrF[MW5E9ANL%n._XZg8*LTjEds0(`%YFb#lQl!!YNh=N&KhaMV[F"-&dDCCTon?4Z?`a`rkADAghJp20Fj/g55'j2'i7>V-f(F7^&I%Q/AjIFVAa%=u64E@0EMj/RiFK7Lh?5kQ"kV'J59[\Xuaq&h:6u*1qPM=2?5p0ldXR>U6[MTOS'hPVO10)&2@/W=9BF=]6[T_e^Rt?>GGRJKJ8p%JCdhg",)s):@/uf*sLW:C<6?_P'$a61mqJu!!,i=,YU_4Rf[;;,YAKHLkTGY0U`bDdNImjAn`?i1PD#`.FgEHFnQF\Gh%P9>,/bu%4BM5m6oW27)5Uj(+_mFl[3Zt]KKt;<Lb]$d-W%2s<Il0u9sC;+/HWqRp('u;cmO#kTil,)JA@C2%Z`>UhAmTL,B9:\I<hQU>.1oq%LB%`]d$cG(InN,HFf[#iQE#PtZLdQ,K(U=#$:6S,C%*#JH+8E/5Imsp;s!N?N6GDVC-27ka^LiU.45Nc\V6oIFG;bBq[_%cBH/:^%16B<hW(`Lomi[=<K51U>Nj+MeciCRR/Xm/22a`i6`U+7d_dr6`SY_?AT8Q<9K?0d'ODMF34t6FGTohE'os%`\fc@2q3IV:+-.W#n%9p&IQq@C^WTa7nb$.fYljV$!++1..^mXJXL3-1Ud%:+"raFC'JNgL%\9CNtmk[!>_:+9-6-!GIt%gf=Tm:7\t>?+:T+WGMV)/qGU%9DYSa*XCg'&K#G0*R'h4WKQD2Th`1Yp)?'i[#QDc;GW.k#V9d>OXIObKcF>hWCRg%=NDc;[5M/j&s+lh9-CTV'%m_ugTod#?/7@Y%9nTN<Lr_1+:sdMn3T0`bZ5*d-\T/NQJuluQ"/_P'Xg\e%GRCKmB0T(enm(k<_3^G;V!WaKD';l@KfXg0SoBqsHr[SgLG'SR>igT*%esRG0>JH3VeGsth6r6=5eqCJgNA(FY8>.!1h':bhi:XChN+=u`:W2+Ql-gbbe%0HQR#H.9RL!@U#R5>"ja>W5c;iB+2W2'd*Q]9(%+LYBEqP\uV"ctt&aoe22&Zu^bAg:mHUgWgm6XEMQA9k-Tq1'aGJZ44&.H(\-9(]c5!bI^m/NPD6VQ,qT>U.uJV8^AVBr6c9Y$sq4%@O2SaF,q3N(8qgZH"oN9>28(<+ZZ+2]GPl!/6m\nGZnQ$3g1>I7]J.U@Tq,=8&0#5Of'I#5TZ1A'.F,'QZYfdoK`BhU23*T$Vr>$%E:m%/;NEu'RI#I_btBHTi)9^-^na4O>-]so)<@g?&8;81_;FM8D32o(]4cNdoEe&Rkp?.]m:]"OY,`!%L/ZjM09F\j(/?7ZKpd4l%c8J`LPZMLW,D0IpEXq2Koa&AH#E5sV[`1o,0IN$:0EIm[g'p2U!89m(P;[@)cOX[o.[U3a)YC/1(8VF/<`2cqUCaBik[gOu*IS%^%.O;f_.,KRA=)5d?)4qV%,H<mYm;UK=`:"g,$9:VPDa5@M[e2&\W7?AZC3pjJ^79)c<:;D@M05V'aj>)PD-U9RQX7t*<hOPJYI",;%V:kq9%$592e6;pj!NWX`j/oc>22"LU[B/JlJ\KoT$O+>rj=A[f"8d8%%ec].)Eg^:F;jdQO1q9$VNch4D2MfOOTN6>@j`'GaAAmM%PTp=5YGI9dOdC/Tb#">1gbaUE2<;D<YG',goc!3?+5;@d3sIJ<J0iUhCh<YCLf[26@&-^gJ!(`Q!i)TYN%utI57lBS):AjNUliBG%Z]0uN))SGa.TBe<l5RkW\!T>N=*`.43tMTA5Nm&WR6!bpSCU%4bS4We""`0AXqY`sL7"5`.$'g9-Lp'KJ[PV3#%6/%%EU9_]'XR%%!,Nm*,sWNg1RrE1p"!#e>.$hk\=n5]L-2i%&0-;>dH':ofgV>18SBq%i!g=mR\rIN.mP5A.?0a1'7_p+EU"J5BK[%lKIjMp)K8#u%>d"S*;$jHR"]/CW"!qV*c10naYqT';M.KI7.pY?mT`ae`;AR7fBJ)LA87@r,;H`?i`"cB:OBLgFRuHOfaEZ8]@!O+ZM</*f6NH84%XB%>l]NU_.\V8I!W]O%WO0EZO*(hn?@h^P!Me#76;r\-I!IPM<7u'6AGpsig_&ta=ZE&<":up*#K.r!qhZ2\I"3Y_:Y*4;>R,4YA%oKd<UlB\AcnquYDnITK&FA$g/-\@6fC$<GK,:s=-mTONDgdenDQbmuTL&s?g[XmL30".!c&*%dC\U%=)8A_1jj:"N#b=@'bJEZH5%mE$94s!'U$3Z1h2=;kkFJqmRU$!$8NK&%1e%O+Oto"G>\S<@!caeVbsI][0kdnlo).::`H7O!dX8K%r8#T[VnpLMDJ`EmS<iJR(P%e=i1d_AD,V4"'E(Zl(/jb=[pf@`69hLlSpJd1Q2-#Y0mW/`Ws6$3e6T0mYO;[Coco2IlnNm5-i]>+![jdoufZgu'30ai7j66WlQ0%^c-QhH;4$A:!3Ph5'frm9(cI<I('27cn+T[qF&M=FID,=oAH!4q96Gtl`SZNDAol;/=I2H=t%o#'?Pt\8)d+?^sR]7CA0-_VhRrM%c=]TOXgMbV4AakMjY!UjUgaJ&\euXr#;_g#KRn:K=er>,[#MH^jGStu9hS.)#Se:_1_QgM2$#GT!0!U8.bLor@CCK%.7dUd$'GJ%%r$]&C8ScKM"O/j@[n8r9YKm\jcB(mg>%psG_'jN&nOnVOM%Ssj%(d&E9:H7Z&mQ4#<MaLgULg@6P!kPJ7=h4-=UZHfXcgVS*,^0/%H+3r>4Z2cC)P5c^kh;2G=5?TS#R3h`SEs<BT5,>3+@lXnFV)/07Em*SWpG>")NYil"Fps^(5?p_-7@a01ij??<tJ*LBdfg2+?43%%^7fi^'SDSJ2!j]s.#CZZ8<^U5BU8_/f"jOFOt/<:^sQmdZocMlcq1E(9(fInY,e8\EKIH$I8JMQ;+dt3!d#-28-65:T7#\=gaS?`%9kqZTBe,hiF+5s$.MW"T$Vu@2!Ych5-:JE(0/5[hp^OlbZ=J&UHF5'E?02Ee(eP12Y>XWL];T.uOmOb-'-siRe3*uh5jAL!X^iDP%PT<qT%..&I;b5/]k*cI?)C%VtKRD$(dP'8Rq:J#W*Cjkb7c:m?b(W*Q0EsHiN)ISX_p./t9#TqQTtuuW#+AC5$d5lAKbMLY^I[fN%'u@*Y25J?K\&OW\0uRl59$i+#!W^kb7V,[>AB*!O4OW0LE>1]PYd34RCk*k+e:s6Z(aV\V_Y"8#P#ES5Cb-t<))=V286\q:dY!2,%d;[f<&<PkuUj#:cF92,L8AiR4/@"6/>*h(n6Br&bcE%1l!M=p^:b>NqH_H)FWeY7RC)S4egn`]AmPL/k\nrSm@-I9`i$,u0!C^c(%W[%5*:I$Z=>^@MSlptt@D))b$*pA>N2G])uCj_GJKNemC9+0<Ak-$XZ%XYZBkQlhn87'2%MFLu7aGih^&\T$&F-;[VjE"3cTsY6t%,;C7-@\/<^\Q(oWZ<mWc!iq;)3uOa56XZ#h=;B8#SU<rpqFJu6!csI;6HhlT?V(;dX1T-Rl1?:lDJ6q$aLhaM<E]qnABi9WTVb(C%Ec`-O;Q3RV]QF\J(Apjp5?bV),PBH0CFokF[:M[iCX,SdJJK3P(IQZ^?ZQu?1u.?GLB'$!KH]<oXp&VHfSGdP`0MOZOXWG^6%U3g%TQj,:@ki6hs.]hL@3duHUQVBnL\-g!0Jp5dhQS]WOR*!=f8OGb&i%mHb1&&Op`[Tt4N7gEnIi/`#Wn\kWLtWlXa0/Ee7g\3ABFCt%XB2R*@=_;iOM#"eBL.dXU7"/A_lY5aGF&^=`Cei1e?)*s991:"^o)`eQoJJRO0GL`,=PN!M(lO'4K^-OiGHV*.WP?9Wg1NQL8-9*%.qQ_qMoZa/DB[4(F?1W[;l(:>KMiQc53ajK\!]uS?!dT@?P<%\DN<cZN6M(Spj^9_^VG>T$hU?r]j*/8g<1Rrs)XU2<m/\YIo"(Y%q!>>^oAOq>^+-;6lD!Zq4?7msI(&c\rCZ,-Sdakhpet&1h7m2J=6W>,4ACatG$eUb5Ga)+aR7o(P'"O(X51H^rH\.1:W(<=BtJ`A%p=H@PqpjumF@a#Nh]>hbI_Rn<>p%MWX6m@oa^osM2P-dQG2)8Kp%`I=G^k)1Pg:n(e,%QN4#LkM4]u.kA:;\Dm$O!]1$AB'`U7bp%luIO@Ed$eiF6mrG.+dcPYLeP9:PT^tf:-9*p@[`n\NB!U;qgWfq.fY=PqGjXMlY@2:6t(Th=^#H>4#Y'Q[F@B2nM-2X?@Z:;gkLc%o_O4sd]hIZ0A^$,]RI3@?!Xm+@M3n:c`jt9cM;K<UiCVIB_Uhne+W'$Yo1,4]tQNh3PV-q])DA?3o<*4^->jb3:?LtjlJ0C?0^K5%nafn1eR+s>bO#>4`c(;EQYS0.^#ZEqq0Y."d\!s\q8^tGl]]%GeHq_O`m^b2pYfVp^=H8]ZfUI/NN;<Qop84IV^E:nq3;_4g>,t/%`nnsL]D:W'GKCa`+7r+9kq)ju(U?5E^?Fr;lYGY?VXa?;E:VHa$Y8kV2W+F^DLNKWg\$LH?!f5UPNJFAH1(T7^0Ip)T'1lHQA=n@%H_L<f#8Tk%lY2u6m8_k&@/`TMY21_5YI$]Th7_JS4du>^[pBqBRtj(/J!r%Bj'U)ul^+)n^0DcPp%k>bB@jbDn#t>5I(ql)qtXg;%?iOhJVQR'sG%YHk-fV5p03Rb1BmlB(:,^%:9<WP]Z2<\[r,m@3I<O=NYI"h,kNU%C^=@MJb9J91e,8g<QWMdOl&3M^qVtaMm;&&Y%+.`/[V!"qr=M4L.FS\p>Bn\,s58A\%SVD?d"%rO</7/=ZNO6=2b[PKmG3S,CMcBUGk1S!#?5R&<l<C(!>dpX-`U07eO4juB\$I*p%qr\&,+B-IBnk1-]RuO;)^,ft(LQc`5eVfs*H-KT!/r/b!@c0XU>TqI9q%.bb5"i*67:BZ3X'O&K=d\DsgC'SAbKWu(Y^;a4=7&<Y%`m%-+%f:$&J"7?1@6"$]C\QA'DpQ#Vl)WY5^\QDQ?JR1+ch"VOJ&m-#7[f_u(=0]Z5B"lrY]tRP['6/=gBMekC9]uo8c73"a;rs/%qPZG18*/_"iR-WCiPFLPiSJ!*%#=i/*B&]HYWf,uc!bm:HuO1HG]7W+J$=,.&&Nl^E!OX=4fAmk"*7<,+7C9dqhP%Rqtp8;qf+je%qgGs2m+_Jb^Y1XDjkfOadGEj=_;>1JhHntFH[a<.21'MMhQ-@o?5\ga;*9dBEBim1(^#/b7:t,OiT5o-3"AI;0H>cEYQkh`nA3Mf%&4jL&;#4[Oj:D3?htMI=->`.-H<XbRar=^!@s:n^6[.J^h&\R1-]cut1'NF>2.=PM;01A02#GN=8F:G!A=q',P%bD/T09VQp<Xl5%ICj,`(jP?ROJluTj)3':\3?o'l[sMuhQ(48f(+@WVRCVQr3rD*I.h:sj]q4QRY4.g\]eR@'q`1N1U_e0A)d@Zfb'\crI+]b]aD+S%DV)[?=hN13qaR&tKl->0`NNE%B%s=?G?2uYnaY#siUObSrpeib4:]F2fGuokp:*;hNm2QhFF81PFEhnH["#H,'T^+nf/d[g?YRK7%/@DBV>4Eb/mAZ@OI)o34C8DXeZIGILBuRI/l3a!ClF8mT%]b4s^Y5_tmS7u5!s(erRAr*ak/\O2"1)q>5fUs,/K>umG^MsrX<t7&%>a3sQV*7HWFM8ftUha,6oZi>C\=W/jAohlBS+g(-)OR_gkKfc&i#cu+>lSC(EqS8RXn4l`q_.+fGk*MG08aCl3g?+WICf9acPO3#%Bg40JU"K>3j@o.?p5j=bF]%#:jra9F[l;'i`P3,bGQ$8,DtV:<l\GMBTq<-En]/V@riKE6)ZAW!I2]He6.Wk2XWDBMLLMG*0^@Qn%J9n!Tn_X)%hm>.6ARff1Dn:=-rqGbThe(((12F(C@k7Ru<BM,sVD#[:hq[;d>/02-^<l!(TC'HVj9%SVW_Bu&dom]2RK%@bX:*i'%r7)SoYJ*$1c;JY-IIZFp\1F4_HXcM>X"SF;rj=rVlHNf<o(qXrioP3+qYB.=!B5L3?\L^NY3&5=Gn1qmq":NmIF,C:lgs^b]COcB%D6CV7N$n(5d)r<5T$U'Dm5A2J^:Dj*k<=1/j4!]W:"RJ$DZ5(\A)pX1Ecj9gKA"?<o=J%V-L+S0ajoN/lX-Q&H?&N)mGQG0dlpo@%T$=,jNujklPYRP]Z^9I+aGX0uCO:?sfO]=h)7Y;Gn@S"M<LTdnH$6I*f%JroBeL<PE9%ZOk@To"0'+6I2BTB.<YBfSp32?ZIQP[>%<."FarVI+TI.>a-8GSTbs*;+7<eBtU'gBRqfe7"/.#7Gbs'TYj0'W5cX6kE:WBIr/3?Tqt^XPF8r-@u/io[GVH^C)d[O4%-X*2jB%s7Q[O+8,\![?i7X-d@cS=20NGpq&c.Vu-mOR#^FgaM#8\k;UH:>ILj?,mQ)!3]YJelU1]V52kqAHu[\G%^76Cn\i09/)>V_c?].o%55R"r=0MJdX4?e-&!%\mHfjVB:;cH\4IhH0LG++&^Xppq]_]=U*:NA-n$<uuE#%Tm[9UJh+66_bWfraqhp(WY;pF4ZiF4cPp-5G5%h=#R%4Fc]Jr#O\^p?=g(.ejaai:jlehX_uJIJ9f4kJ*Jj]K/4?s$Na"r$(#MY:od[O*191I&FT;r:Z\B=OhRB1o4FCI[f'?hp#&K%]2dh'o5.1]GG(6!S\<9$gYV)UP@=.HSSqKZAgc*Jr6F0_k2@DreXJr>l.sN8L7QIerce'>[nm%n]t3;tk2D4TY.hV4aaWNeQJu@t%?gdm]k1(Ne_!a\E8iQ]1f<p)iL%@6LpfRTK&YT/mS+!i\AR)U/X)?Ts%Z>d]]"D:8`T=5hp!+f(1S2AEZ/'$_#fDG<&$;]6Git3q%#C,F:h#fh;n?BO*MncGJg[hJ(<hI*UX4s0RMlW&VhHZtkh:*Ehd9`VArUK7N1rki!"Emr)$8i=iqKd:(]iog<;CQVVf6lN9gN9hc%]q3M(c(/qTR',;Yj,Em$iH?F;:,fB;Dr59=38(k:o^1nbe\.Z_p?K\f(YEEIMftJ(o"?[mHe5=[k.,BE/?aElm7b&-:C3tklapEa%j.?:8qNWD&CJW^Vro$qkF3='"7BsjAQ$ulLhiV!@bN4eo$f='eE.<1STueX%n]QNYQ0%i?\%d.,`FZVQQTq=cnu$ST6$2U2qe*Yo%GJ6_Js4"1]Qi2hRhk&i,?0/h>P>RfZ^SIsjbJX.<o09u8Gf3m+s.m3iQ^:&X*^7q[pT*E@cC`@/]q-mTpK=#Vk>/Crb&Pn"9A_s^%b0&M!L/O-[?hF2(Q=tNj^.jr`*6^Go<%`Qo"D^jlc!m4`.i0kMi`SI4/F/5cop8fud3db#H)Ppj+8\[Nra@rcYB7/No_Ikf^+.:E%*kA,>oq.SoiqDN"ofJ.IoKuRG1mW7Tb6ngUWHe55n_C\rn+C?4+>`]]EgGN:3P4s5q(,\E3Oeb#IkPD6*/h<4413rEH*pROHAIn4%2n:F5#5nME^[h9%=D&+^7t8%_XX!Y^e$g-3^:Wg9<aRDTT.)9nkRCneXmc/)$a0%bq9T'hZuItO'gM&go95*!#FjIJh""g18q[.g%o9(b&\58Z%[*o!>`QL2FkV#A9p!7EEb>G0rp&+"9i`WFR3GgDcJ%8>+g)d#Bi+r&Db?si'HMM(@m*?;007R(<0@sS&LS8[FB:gi+%pt*Q`Vfk/<]6i#Um+<07UU0RYcd1<0J,UVc2(n76\hXXDbIWOA\9DG[brgG^U*oc6p%ki+XR^cuO7Bm>0pT)'k9aQqfh\^8ZhJpq%YP"E0ZDp!GQ<_*:S7_MV7HNX5Q&T-Q?glL(hVq4=7Qum41_t;(Wb`G(1o<L@O4uE*h"k9qoOA;Qqq1i%Y[_.TGE;XIntOba$bO(X%8)#04kOYWrgPNaH1GM`Zp0[-fT:9RC<,tJ$oldtUr2C%bc)j@>'>8IF+3oc,\m/D'.gP,,_..2gSDk?X2!c(B(]4/X?[_r;Y?p>b%2GFjpH<4((rV]5sfgFLGVl<uG>AmHZYGQqaP&:'8[X:'l&n)=5G2$+t5FgJFA+Ob[kBfC9s&hPVHoKTZT5WcHGJ8"!r[[,8n,:Aj%]CZWsgXHbsG2$,!5+LAEA+Ob[kBfC9s&hPVI%0o3kIV&nqp+s'eUPPclb,O5I+S4G8uVQ5f6RuVcK92[IE\n@S^$QqZ.ZZHo6k9<%rj."-q6$Q7*h.*>fR,XSabBJVn'0ClbkK\h=8BO(j6BDqhduJ"^<?"bDRYUnk2G*5)k3IH45]Y7qp4hqkM+Wr4l;RgI_Y]m^&"q"%DnYm8T'r.X\Xc?iUT?dFJdgM5F;rmSmZ5&K`o]1IHX^f7DKf#p].VI2N8LVc7nhL.XPUR!0;^HCib%QNghgQ-F1^i.34D]$rNZ/[%cKl,:e<llaE>kBN7H+6ur%9emkFNT]c@+bHg=eddP+/`PQ`TJ-?ZOoRFREXGEb5W2qdZsV>YBJ)k3oWnCj,5Vmo\;!ms$oPHcJ15%S#bG<]5;A-mN_0[f7)]Xf_cbZC!8^t2P'`d43GUugi;pL[q##RCaM<V3Hs61FREZ-=>pcJZ#1Vsj%PWJVoGTT++)&>HMEMCp$`tr%GkaJW`hmf!HcMOT$hq\RmoY;/_>A$fS"6Tc0AA\A2>\fipnj),7>oiQ;RTb?GCW?KltO]485_m9)%!R;4h,&smq&;Gn!q"49FB6P%T>/MHB6f:#/<+!ebFR'PqqfelHDmoAq=V;7$E7f%Cj*,;:OIiM8oKI4ZhC-,Hg#Mm6J*`h\'r`&C@?B"rC8N1B0M(Hc:'s\VDO4'%ZUJnY/Y()*U]J-8Fqr5]0<JGXcE.VW,]iNEDFP*Cnr'3)EO-OHkql\Eb3K"M5Z\B[dl(]qIW/ka=jn5F`G*aZ(RIs&9=E(iCe"%&%nkJ%NSK4Q1loc05+q1cS._iOdboobaZQlN07gM1s9u>nsq!MJP9T+>4EhghtDsrIc.P:2Ud1DULr3:KIISe,Rp:cN8B^4l386%Di%q"fi?h.7Mn7aD]MQ?5';VG@eO[0`LK-`[c90064a=53YW^:*b7_cAj!o6C')frkd"IXO]h597YrkXBur/*D60:\o,gf!pJrFkbPj%DYMe8ETR'LR+or+'Cc"'$O3m5Wu(%Wo:,/N8,MQ>l-'Cfo='-PmDG"[T%>'o\>pGg(a#6Pg#B/$o>&`*3]<Q+f]&3HWXmL)^uBh#%O7@W1k>T2sSnFBf1)l+rKuD2=Q/$cjM>KeU@\,En18lM,R`0@4%_kaX4o9;;[QNL1=$>\HAc0d=1uPOJ=`MF[ra+JhT7+=Vbqdih%:\F]bS)1?sKK**I+7O`/^W4)p+LWoE1q=,j"MQ+]pUAA'9i(V:3O/!RjM]o;C9mDN6L!:\Q+-=l+<R&MJ[-V++1Gft$<Pk,5"IP*%A$^4gU%_GZ&"hs%*NI9>g?*(rUT(+o.qKJi\pI$TGRTXdWZJ_Ird/#N';V(oD`e2'VYQh35h"M+)k0/Qe(eg[S"70Zn+lYE5KcQg%n#`RdVrugTpqH@52:_?kI"2&ne+AWt!7Nd^;]9><gMLG!&8dljD.Bnn2tK2IhYh*_aRd)&eb"mtG4'eAHY]YGl1t>RWM[p!Sd!k,%o0#_KD<?$=fI$6uRG7+=e%)sZIHPqNTB5+Yp\%S846F/XhfHN@Vja3iqBnfk:#C1&b"_IjV1GMSh)7.p*iHR)2E!X@1Z.fih1(`O%4Ps@A9i'*Ej14&c^:0u.St>CHRqf7['3B5G<0MJ!a'MGLF.:B;1%o:\ad+pek2rWiC[Aa>(Xq"fXgC*4gXr:#VWg*Rp8PYg2Lic8%*FbWZS#;^Pd@""qmZ5W]1=L^GWNjKA:".^];GGVAS'jaSfT]F*cJ:DP=K6(]VO8agmZ5WLEL'YZS@`Y)d8\Te9N.s*HClWlZl,@0%Pr@fC)gaEl1d1"qqmlT6o66_Q9%1?*`Z@c1:!YhrR\ohIdRDX;PZF6uh)=t/WbHdV.Fg8gc]g&N`b(Ch4uN%9WbHdV.Fg8gc]g&N%`hp,kFRHTBa&5X\1X3:q]0A3#a&uS[F7-KA4/o)\[QR1VMqVlgEVRieQCA8Yf:9dMau?,bVD20>P]@'Io@;)IC`RRY?74VnGM?6T%YuUFAm/F?hNDiQ[?LW?M+\>!P$MPju<4VRK;TMVD-5WST\)s-f??cFslfPa=+l'Wn7nbgLPMBFQB="k4A<S;Q=jBr=BSS^8ZXf7G%JQ1mqVk`m@2A`C!c[S#1-(?f&ZXhNAG+3=%>^V`)g-!5'fjqY"X6SA8qT=>/:Y@)LCp(In2DGDG=jAo/V!3MJ'2j30>X*)6Bli0]%&(r;aP[p9Cmk3?OWQ$CA1o]1X@l00>RAK0'D.AW=S#-A\BsUO_I6T.7o\8g0@G.O8GgB0PD49ngHce6`(?6t#ZrtJVN6sI?AX937%[uEP>D;'An^L+DURJe3fgLR.<C?PU[AXdoICb*81]ob'-fJ61(;"@dq_0[V5fl9k2q(u1DqT>rUE>>S$@ocW+546G052C7mdpd^c%q2opmQ2Q%m5D%QXBBB`IWWETMrh.>\hom/U$V=+"R6TiOX8S#!o>LjYR%")lBD_$7C!)d/mE'(R/7)\7n_Tk0F)F="dN>!Qitkd8%Q9R1";f3-Gm'EIjO,O#CW*u34~>%AI9_PrivateDataEnd